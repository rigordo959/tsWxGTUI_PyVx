
Help on module tsWxPySizer:

NAME
    tsWxPySizer

FILE
    ./tsLibGUI/tsWxPkg/src/tsWxPySizer.py

DESCRIPTION
    tsWxPySizer.py - A special version of wx.Sizer that has been
    instrumented to allow the C++ virtual methods to be overloaded
    in Python derived classes. You would derive from this class
    if you are wanting to implement a custom sizer in Python code.

CLASSES
    tsWxSizer.Sizer(tsWxObject.Object)
        PySizer
    
    class PySizer(tsWxSizer.Sizer)
     |  wx.PySizer is a special version of wx.Sizer that has been instrumented
     |  to allow the C++ virtual methods to be overloaded in Python derived
     |  classes. You would derive from this class if you are wanting to implement
     |  a custom sizer in Python code. Simply implement CalcMin and RecalcSizes
     |  in the derived class and you are all set.
     |  
     |  When Layout is called it first calls CalcMin followed by RecalcSizes so
     |  you can optimize a bit by saving the results of CalcMin and reusing them
     |  in RecalcSizes.
     |  
     |  wxPython Note: If you wish to create a sizer class in wxPython you
     |  should derive the class from wxPySizer in order to get Python-aware
     |  capabilities for the various virtual methods.
     |  
     |  Method resolution order:
     |      PySizer
     |      tsWxSizer.Sizer
     |      tsWxObject.Object
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  CalcMin(self)
     |      Calculate the total minimum width and height needed by all items
     |      in the sizer according to this sizer layout algorithm.
     |      
     |      This method is abstract and has to be overwritten by any derived
     |      class.
     |      
     |      Here, the sizer will do the actual calculation of its childrens
     |      minimal sizes.
     |      
     |      Implemented in wxGridBagSizer, and wxBoxSizer.
     |  
     |  RecalcSizes(self)
     |      Recalculate (if necessary) the position and size of each item and
     |      then call item.SetDimension to do the actual positioning and sizing
     |      of the items within the space alloted to this sizer.
     |  
     |  __init__(self)
     |      The constructor.
     |      
     |      Creates a wx.PySizer. Must be called from the __init__ in the
     |      derived class.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxSizer.Sizer:
     |  
     |  Add(self, item, proportion=0, flag=0, border=0, userData=None)
     |      Appends a child to the sizer.
     |      
     |      wxSizer itself is an abstract class, but the parameters are
     |      equivalent in the derived classes that you will instantiate to
     |      use it so they are described here:
     |      
     |      Parameters:
     |      window  The window to be added to the sizer. Its initial size
     |      (either set explicitly by the user or calculated internally when
     |      using wxDefaultSize) is interpreted as the minimal and in many
     |      cases also the initial size.
     |      
     |      proportion      Although the meaning of this parameter is
     |      undefined in wxSizer, it is used in wxBoxSizer to indicate if a
     |      child of a sizer can change its size in the main orientation of
     |      the wxBoxSizer - where 0 stands for not changeable and a value
     |      of more than zero is interpreted relative to the value of other
     |      children of the same wxBoxSizer. For example, you might have a
     |      horizontal wxBoxSizer with three children, two of which are
     |      supposed to change their size with the sizer. Then the two
     |      stretchable windows would get a value of 1 each to make them
     |      grow and shrink equally with the sizers horizontal dimension.
     |      
     |      flag OR-combination of flags affecting sizers behaviour.
     |      See wxSizer flags list for details.
     |      
     |      border Determines the border width, if the flag parameter is
     |      set to include any border flag.
     |      
     |      userData Allows an extra object to be attached to the
     |      sizer item, for use in derived classes when sizing information
     |      is more complex than the proportion and flag will allow for.
     |  
     |  AddF(self, *args, **kwargs)
     |      AddF(self, item, wx.SizerFlags flags) -> wx.SizerItem
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  AddItem(self, item)
     |      Adds a wx.SizerItem to the sizer.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  AddMany(self, items)
     |      AddMany is a convenience method for adding several items to a sizer
     |      at one time. Simply pass it a list of tuples, where each tuple
     |      consists of the parameters that you would normally pass to the
     |      Add method.
     |      
     |      Convenience method not in sizer.h or sizer.cpp file of wxWidgets.
     |  
     |  AddSizer(self, *args, **kwargs)
     |      Compatibility alias for Add.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  AddSpacer(self, size)
     |      This base function adds non-stretchable space to both the horizontal
     |      and vertical orientation of the sizer.
     |      
     |      More readable way of calling:
     |      wxSizer::Add(size, size, 0).
     |  
     |  AddStretchSpacer(self, prop=1)
     |      Adds stretchable space to the sizer.
     |      
     |      More readable way of calling:
     |      wxSizer::Add(0, 0, prop).
     |  
     |  AddWindow(self, window, flags)
     |      Appends a child to the sizer.
     |      
     |      wxSizer itself is an abstract class, but the parameters are
     |      equivalent in the derived classes that you will instantiate to
     |      use it so they are described here:
     |      
     |      Parameters:
     |      window  The window to be added to the sizer. Its initial size
     |      (either set explicitly by the user or calculated internally when
     |      using wxDefaultSize) is interpreted as the minimal and in many
     |      cases also the initial size.
     |      
     |      flags   A wxSizerFlags object that enables you to specify most
     |      of the above parameters more conveniently.
     |  
     |  Clear(self, delete_windows=False)
     |      Detaches all children from the sizer.
     |      
     |      If delete_windows is true then child windows will also be deleted.
     |  
     |  ComputeFittingClientSize(self, window)
     |      Computes client area size for window so that it matches the sizers
     |      minimal size.
     |      
     |      Unlike GetMinSize(), this method accounts for other constraints
     |      imposed on window, namely displays size (returned size will never
     |      be too large for the display) and maximum window size if previously
     |      set by wxWindow::SetMaxSize().
     |      
     |      The returned value is suitable for passing to
     |      wxWindow::SetClientSize() or wxWindow::SetMinClientSize().
     |  
     |  ComputeFittingWindowSize(self, window)
     |      Like ComputeFittingClientSize(), but converts the result into
     |      window size.
     |      
     |      The returned value is suitable for passing to wxWindow::SetSize()
     |      or wxWindow::SetMinSize().
     |  
     |  DeleteWindows(self)
     |      Destroy all windows managed by the sizer.
     |      
     |      Modeled after DeleteWindows in sizer.cpp file of wxWidgets.
     |  
     |  Detach(self, item)
     |      Detaches an item from the sizer without destroying it. This method
     |      does not cause any layout or resizing to take place, call Layout
     |      to do so. The item parameter can be either a window, a sizer, or
     |      the zero-based index of the item to be detached. Returns True if
     |      the child item was found and detached.
     |      
     |      Modeled after Detach in sizer.cpp file of wxWidgets.
     |  
     |  DetachIndex(self, index)
     |      Detach a item at position index from the sizer without destroying
     |      it.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout() to update the layout "on screen" after detaching a
     |      child from the sizer. Returns true if the child item was found
     |      and detached, false otherwise.
     |  
     |  DetachSizer(self, sizer)
     |      Detach the child sizer from the sizer without destroying it.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout() to update the layout "on screen" after detaching a
     |      child from the sizer.
     |      
     |      Returns true if the child item was found and detached, false otherwise.
     |  
     |  DetachWindow(self, window)
     |      Detach the child window from the sizer without destroying it.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout() to update the layout "on screen" after detaching a
     |      child from the sizer.
     |      
     |      Returns true if the child item was found and detached, false
     |      otherwise.
     |  
     |  DoInsert(self, index, item)
     |      Adds a wx.SizerItem to the sizer.
     |      
     |      Modeled after DoInsert in sizer.cpp file of wxWidgets.
     |  
     |  DoSetItemMinSize(self, item, width, height)
     |      Set the minimum width and height of to the sizer item.
     |      
     |      Modeled after DoSetItemMinSize in sizer.cpp file of wxWidgets.
     |  
     |  DoSetItemMinSizeIndex(self, index, width, height)
     |      Set the minimum width and height of to the idexed item.
     |      
     |      Modeled after DoSetItemMinSize in sizer.cpp file of wxWidgets.
     |  
     |  DoSetItemMinSizeSizer(self, sizer, width, height)
     |      Set the minimum width and height of to the sizer item.
     |      
     |      Modeled after DoSetItemMinSize in sizer.cpp file of wxWidgets.
     |  
     |  DoSetItemMinSizeWindow(self, window, width, height)
     |      Set the minimum width and height of to the sizer item.
     |      
     |      Modeled after DoSetItemMinSize in sizer.cpp file of wxWidgets.
     |  
     |  DoSetMinSize(self, width, height)
     |      Set the minimum width and height of to the sizer.
     |      
     |      Modeled after DoSetMinSize in sizer.cpp file of wxWidgets.
     |  
     |  FindSizerClientArea(self)
     |      Return the client area of the window object that contains this
     |      sizer and all of its descendant children.
     |      
     |      To accomplish this, scan the list of children for the first window
     |      object (e.g. panel, button, checkbox, radiobutton, textctrl etc.)
     |      whose parent would be considered the one containing this sizer.
     |  
     |  Fit(self, window)
     |      Tell the sizer to resize the window so that its client area matches
     |      the sizers minimal size (ComputeFittingClientSize() is called to
     |      determine it).
     |      
     |      This is commonly done in the constructor of the window itself, see
     |      sample in the description of wxBoxSizer.
     |      
     |      Returns:
     |      The new window size.
     |  
     |  FitInside(self, window)
     |      Tell the sizer to resize the virtual size of the window to match
     |      the sizers minimal size.
     |      
     |      This will not alter the on screen size of the window, but may
     |      cause the addition/removal/alteration of scrollbars required to
     |      view the virtual area in windows which manage it.
     |  
     |  GetChildren(self)
     |      Returns the list of the items in this sizer.
     |      
     |      The elements of type-safe wxList wxSizerItemList are pointers to
     |      objects of type wxSizerItem.
     |  
     |  GetContainingWindow(self)
     |      Returns the window this sizer is used in or NULL if none.
     |  
     |  GetCount(self)
     |      Return the number of children for this sizer
     |  
     |  GetItem(self, item, Recursive=False)
     |      Returns the wx.SizerItem which holds the item given. The item
     |      parameter can be either a window, a sizer, or the zero-based
     |      index of the item to be found.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  GetItemById(self, id, Recursive=False)
     |      Finds item of the sizer which has the given id.
     |      
     |      This id is not the window id but the id of the wxSizerItem itself.
     |      This is mainly useful for retrieving the sizers created from XRC
     |      resources. Use parameter recursive to search in subsizers too.
     |      Returns pointer to item or NULL.
     |  
     |  GetItemCount(self)
     |      Returns the number of items in the sizer.
     |      
     |      If you just need to test whether the sizer is empty or not you can
     |      also use IsEmpty() function.
     |  
     |  GetItemIndex(self, index, Recursive=False)
     |      Finds wxSizerItem which is located in the sizer at position index.
     |      
     |      Use parameter recursive to search in subsizers too. Returns pointer
     |      to item or NULL.
     |  
     |  GetItemSizer(self, sizer, Recursive=False)
     |      Returns the wx.SizerItem which holds the item given. The item
     |      parameter can be either a window, a sizer, or the zero-based
     |      index of the item to be found.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  GetItemWindow(self, window, Recursive=False)
     |      Finds wxSizerItem which holds the given window.
     |      
     |      Use parameter recursive to search in subsizers too. Returns
     |      pointer to item or NULL.
     |  
     |  GetMaxClientSize(self, window)
     |      Returns the minimal size of the sizer. This is either the combined
     |      minimal size of all the children and their borders or the minimal
     |      size set by SetMinSize, depending on which is bigger.
     |      
     |      Modeled after GetMaxClientSize in sizer.cpp file of wxWidgets.
     |  
     |  GetMinClientSize(self, window)
     |      Returns the minimal size of the sizer. This is either the combined
     |      minimal size of all the children and their borders or the minimal
     |      size set by SetMinSize, depending on which is bigger.
     |      
     |      Modeled after GetMinClientSize in sizer.cpp file of wxWidgets.
     |  
     |  GetMinSize(self)
     |      Returns the minimal size of the sizer.
     |      
     |      This is either the combined minimal size of all the children and
     |      their borders or the minimal size set by SetMinSize(), depending
     |      on which is bigger. Note that the returned value is client size,
     |      not window size. In particular, if you use the value to set
     |      toplevel windows minimal or actual size, use
     |      wxWindow::SetMinClientSize() or wxWindow::SetClientSize(),
     |      not wxWindow::SetMinSize() or wxWindow::SetSize().
     |  
     |  GetMinSizeTuple(self)
     |      Returns the minimal size of the sizer.
     |      
     |      This is either the combined minimal size of all the children and
     |      their borders or the minimal size set by SetMinSize(), depending
     |      on which is bigger. Note that the returned value is client size,
     |      not window size. In particular, if you use the value to set
     |      toplevel windows minimal or actual size, use
     |      wxWindow::SetMinClientSize() or wxWindow::SetClientSize(),
     |      not wxWindow::SetMinSize() or wxWindow::SetSize().
     |  
     |  GetPosition(self)
     |      Returns the current position of the sizer.
     |  
     |  GetPositionTuple(self)
     |      Returns the current position of the sizer.
     |  
     |  GetProportionedUnitSize(self, guiItem, unitProportion=1, totalProportion=1, tiled=True, orientation=4, pixels=True)
     |      Return the size of each unit when a GUI item has been subdivided
     |      into the specified column or row orientation proportion.
     |      
     |      When pixels is True, the returned size will be in pixel units and
     |      character units when pixels is False..
     |      
     |      When tiled is True, the unit size is constrained to be in integer
     |      multiples of the standard fixed-width font character. As a
     |      consequence, none of the borders of each unit will overlap.
     |      
     |      However, when tiled is False,  the unit size may be fractional
     |      multiples of the standard fixed-width font character. As a
     |      consequence, some the units may share an overlapping border.
     |  
     |  GetSize(self)
     |      Returns the current size of the sizer.
     |  
     |  GetSizeTuple(self)
     |      Returns the current size of the sizer.
     |  
     |  GetSubdividedUnitSize(self, guiItem, colUnits=1, rowUnits=1, tiled=True, pixels=True)
     |      Return the size of each unit when a GUI item has been subdivided
     |      into the specified number of columns and rows.
     |      
     |      When pixels is True, the returned size will be in pixel units and
     |      character units when pixels is False..
     |      
     |      When tiled is True, the unit size is constrained to be in integer
     |      multiples of the standard fixed-width font character. As a
     |      consequence, none of the borders of each unit will overlap.
     |      
     |      However, when tiled is False,  the unit size may be fractional
     |      multiples of the standard fixed-width font character. As a
     |      consequence, some the units may share an overlapping border.
     |  
     |  Hide(self, item, Recursive=False)
     |      Hides the child sizer.
     |      
     |      To make a sizer item disappear, use Hide() followed by Layout().
     |      
     |      Use parameter recursive to hide elements found in subsizers.
     |      Returns true if the child item was found, false otherwise.
     |  
     |  HideIndex(self, index, Recursive=False)
     |      Hides the item at position index.
     |      
     |      To make a sizer item disappear, use Hide() followed by Layout().
     |      
     |      Use parameter recursive to hide elements found in subsizers. Returns
     |      true if the child item was found, false otherwise.
     |  
     |  HideSizer(self, sizer, Recursive=False)
     |      Hides the child sizer.
     |      
     |      To make a sizer item disappear, use Hide() followed by Layout().
     |      
     |      Use parameter recursive to hide elements found in subsizers.
     |      Returns true if the child item was found, false otherwise.
     |  
     |  HideWindow(self, window, Recursive=False)
     |      Hides the child window.
     |      
     |      To make a sizer item disappear, use Hide() followed by Layout().
     |      
     |      Use parameter recursive to hide elements found in subsizers.
     |      Returns true if the child item was found, false otherwise.
     |  
     |  Insert(self, before, item, proportion=0, flag=0, border=0, userData=None)
     |      Inserts a new item into the list of items managed by this sizer before
     |      the item at index before. See Add for a description of the parameters.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  InsertF(self, *args, **kwargs)
     |      InsertF(self, int before, item, wx.SizerFlags flags) -> wx.SizerItem.
     |      
     |      Similar to Insert, but uses the wx.SizerFlags convenience class for
     |      setting the various flags, options and borders.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  InsertItem(self, index, item)
     |      Inserts a wx.SizerItem to the sizer at the position given by index.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  InsertSizer(self, *args, **kw)
     |      Compatibility alias for Insert.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  InsertSpacer(self, index, size)
     |      Inserts stretchable space to the sizer.
     |      
     |      More readable way of calling wxSizer::Insert(0, 0, prop).
     |  
     |  InsertStretchSpacer(self, index, prop)
     |      Inserts stretchable space to the sizer.
     |      
     |      More readable way of calling wxSizer::Insert(0, 0, prop).
     |  
     |  InsertWindow(self, *args, **kw)
     |      Compatibility alias for Insert.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  IsEmpty(self)
     |      Return true if the sizer has no elements.
     |  
     |  IsShown(self, item)
     |      Returns true if the item at index is shown.
     |  
     |  IsShownIndex(self, index)
     |      Returns true if the item at index is shown.
     |  
     |  IsShownSizer(self, sizer)
     |      Returns true if the sizer is shown.
     |  
     |  IsShownWindow(self, window)
     |      Returns true if the window is shown.
     |  
     |  Layout(self)
     |      Call this to force layout of the children anew, e.g. after
     |      having added a child to or removed a child (window, other sizer
     |      or space) from the sizer while keeping the current dimension.
     |  
     |  Prepend(self, item, proportion=0, flag=0, border=0, userData=None)
     |      Same as Add(), but prepends the items to the beginning of the list
     |      of items (windows, subsizers or spaces) owned by this sizer.
     |  
     |  PrependF(self, *args, **kwargs)
     |      PrependF(self, item, wx.SizerFlags flags) -> wx.SizerItem
     |      
     |      Similar to Prepend but uses the wx.SizerFlags convenience class for
     |      setting the various flags, options and borders.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  PrependItem(self, item)
     |      Prepends a wx.SizerItem to the sizer.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  PrependSizer(self, *args, **kw)
     |      Compatibility alias for Prepend.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  PrependSpacer(self, size)
     |      Prepends non-stretchable space to the sizer.
     |  
     |  PrependStretchSpacer(self, prop=1)
     |      Prepends stretchable space to the sizer.
     |  
     |  PrependWindow(self, *args, **kw)
     |      Compatibility alias for Prepend.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  Remove(self, item)
     |      Removes an item from the sizer and destroys it. This method does
     |      not cause any layout or resizing to take place, call Layout to
     |      update the layout on screen after removing a child from the sizer.
     |      The item parameter can be either a window, a sizer, or the zero-based
     |      index of an item to remove. Returns True if the child item was found
     |      and removed.
     |      
     |      Note:
     |      
     |      For historical reasons calling this method with a wx.Window parameter
     |      is deprecated, as it will not be able to destroy the window since it
     |      is owned by its parent. You should use Detach instead.
     |      
     |      Modeled after Remove in sizer.cpp file of wxWidgets.
     |  
     |  RemovePos(self, *args, **kw)
     |      Compatibility alias for Remove.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  RemoveSizer(self, *args, **kw)
     |      Compatibility alias for Remove.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  RemoveWindow(self, *args, **kw)
     |      Compatibility alias for Remove.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  Replace(self, olditem, item, Recursive=False)
     |      Detaches the given olditem from the sizer and replaces it with item
     |      which can be a window, sizer, or wx.SizerItem.  The detached child
     |      is destroyed only if it is not a window, (because windows are owned
     |      by their parent, not the sizer.) The recursive parameter can be used
     |      to search for the given element recursivly in subsizers.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout to do so.
     |      
     |      Returns True if the child item was found and removed.
     |      
     |      Modeled after Replace in sizer.cpp file of wxWidgets.
     |  
     |  ReplaceIndex(self, old, newitem, Recursive=False)
     |      Detaches the given olditem from the sizer and replaces it with item
     |      which can be a window, sizer, or wx.SizerItem.  The detached child
     |      is destroyed only if it is not a window, (because windows are owned
     |      by their parent, not the sizer.) The recursive parameter can be used
     |      to search for the given element recursivly in subsizers.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout to do so.
     |      
     |      Returns True if the child item was found and removed.
     |      
     |      Modeled after Replace in sizer.cpp file of wxWidgets.
     |  
     |  ReplaceSizer(self, oldsz, newsz, Recursive=False)
     |      Detaches the given olditem from the sizer and replaces it with item
     |      which can be a window, sizer, or wx.SizerItem.  The detached child
     |      is destroyed only if it is not a window, (because windows are owned
     |      by their parent, not the sizer.) The recursive parameter can be used
     |      to search for the given element recursivly in subsizers.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout to do so.
     |      
     |      Returns True if the child item was found and removed.
     |      
     |      Modeled after Replace in sizer.cpp file of wxWidgets.
     |  
     |  ReplaceWindow(self, oldwin, newwin, Recursive=False)
     |      Detaches the given olditem from the sizer and replaces it with item
     |      which can be a window, sizer, or wx.SizerItem.  The detached child
     |      is destroyed only if it is not a window, (because windows are owned
     |      by their parent, not the sizer.) The recursive parameter can be used
     |      to search for the given element recursivly in subsizers.
     |      
     |      This method does not cause any layout or resizing to take place,
     |      call Layout to do so.
     |      
     |      Returns True if the child item was found and removed.
     |      
     |      Modeled after Replace in sizer.cpp file of wxWidgets.
     |  
     |  SetContainingWindow(self, window)
     |      Set (or unset) the window this sizer is used in.
     |      
     |      Modeled after SetContainingWindow in sizer.cpp file of wxWidgets.
     |  
     |  SetDimension(self, *args)
     |      Call this to force the sizer to take the given dimension and thus force
     |      the items owned by the sizer to resize themselves according to the
     |      rules defined by the parameter in the Add, Insert or Prepend methods.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  SetItemMinSize(self, item, size)
     |      Sets the minimum size that will be allocated for an item in the sizer.
     |      The item parameter can be either a window, a sizer, or the zero-based
     |      index of the item. If a window or sizer is given then it will be
     |      searched for recursivly in subsizers if neccessary.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  SetMinSize(self, size)
     |      Call this to give the sizer a minimal size. Normally, the sizer will
     |      calculate its minimal size based purely on how much space its children
     |      need. After calling this method GetMinSize will return either the
     |      minimal size as requested by its children or the minimal size set
     |      here, depending on which is bigger.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  SetSizeHints(self, window)
     |      This method first calls Fit() and then
     |      wxTopLevelWindow::SetSizeHints() on the window passed to it.
     |      
     |      Tell the sizer to set (and Fit) the minimal size of the window to match
     |      the sizers minimal size. This is commonly done in the constructor of
     |      the window itself if the window is resizable (as are many dialogs
     |      under Unix and frames on probably all platforms) in order to prevent
     |      the window from being sized smaller than the minimal size required by
     |      the sizer.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  SetVirtualSizeHints(self, window)
     |      Tell the sizer to set the minimal size of the window virtual area to
     |      match the sizers minimal size. For windows with managed scrollbars
     |      this will set them appropriately.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  Show(self, item, show=True, Recursive=False)
     |      Shows or hides an item managed by the sizer. To make a sizer item
     |      disappear or reappear, use Show followed by Layout. The item
     |      parameter can be either a window, a sizer, or the zero-based index
     |      of the item. Use the recursive parameter to show or hide an item
     |      in a subsizer. Returns True if the item was found.
     |      
     |      Modeled after Show in sizer.h file of wxWidgets.
     |  
     |  ShowIndex(self, index, show=True, Recursive=False)
     |      Shows or hides an item managed by the sizer. To make a sizer item
     |      disappear or reappear, use Show followed by Layout. The item
     |      parameter can be either a window, a sizer, or the zero-based index
     |      of the item. Use the recursive parameter to show or hide an item
     |      in a subsizer. Returns True if the item was found.
     |      
     |      Modeled after Show in sizer.h file of wxWidgets.
     |  
     |  ShowItems(self, show)
     |      Recursively call wxWindow.Show on all sizer items.
     |      
     |      Modeled after ShowItems in sizer.h file of wxWidgets.
     |  
     |  ShowSizer(self, sizer, show=True, Recursive=False)
     |      Shows or hides an item managed by the sizer. To make a sizer item
     |      disappear or reappear, use Show followed by Layout. The item
     |      parameter can be either a window, a sizer, or the zero-based index
     |      of the item. Use the recursive parameter to show or hide an item
     |      in a subsizer. Returns True if the item was found.
     |      
     |      Modeled after Show in sizer.h file of wxWidgets.
     |  
     |  ShowWindow(self, window, show=True, Recursive=False)
     |      Shows or hides an item managed by the sizer. To make a sizer item
     |      disappear or reappear, use Show followed by Layout. The item
     |      parameter can be either a window, a sizer, or the zero-based index
     |      of the item. Use the recursive parameter to show or hide an item
     |      in a subsizer. Returns True if the item was found.
     |      
     |      Modeled after Show in sizer.h file of wxWidgets.
     |  
     |  VirtualFitSize(self, window)
     |      Return the size that can contain virtually all of the displayable
     |      window object.
     |      
     |      Modeled after VirtualFitSize in sizer.cpp file of wxWidgets.
     |  
     |  WX_CLEAR_LIST(self, what)
     |      Sequentially remove each item from the specified list.
     |  
     |  __del__(self)
     |      The destructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxSizer.Sizer:
     |  
     |  Children
     |      Returns the list of the items in this sizer.
     |      
     |      The elements of type-safe wxList wxSizerItemList are pointers to
     |      objects of type wxSizerItem.
     |  
     |  ContainingWindow
     |      Returns the window this sizer is used in or NULL if none.
     |  
     |  MinSize
     |      Returns the minimal size of the sizer.
     |      
     |      This is either the combined minimal size of all the children and
     |      their borders or the minimal size set by SetMinSize(), depending
     |      on which is bigger. Note that the returned value is client size,
     |      not window size. In particular, if you use the value to set
     |      toplevel windows minimal or actual size, use
     |      wxWindow::SetMinClientSize() or wxWindow::SetClientSize(),
     |      not wxWindow::SetMinSize() or wxWindow::SetSize().
     |  
     |  Position
     |      Returns the current position of the sizer.
     |  
     |  Size
     |      Returns the current size of the sizer.
     |  
     |  SizerItemList
     |      Returns the list of the items in this sizer.
     |      
     |      The elements of type-safe wxList wxSizerItemList are pointers to
     |      objects of type wxSizerItem.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxObject.Object:
     |  
     |  Destroy(self)
     |      Deletes the C++ object this Python object is a proxy for.
     |  
     |  GetClassInfo(self)
     |      Return information about the class.
     |  
     |  GetClassName(self)
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  IsSameAs(self, p)
     |      For wx.Objects that use C++ reference counting internally, this
     |      method can be used to determine if two objects are referencing
     |      the same data object.
     |  
     |  tsBeginClassRegistration(self, theClass, applicationId)
     |      Establish connection with application logger. Log the beginning of
     |      class registration.
     |      
     |      Establish application access to display top-level window and to
     |      curses screen and windows.
     |  
     |  tsEndClassRegistration(self, theClass)
     |      Log the ending of class registration.
     |  
     |  tsGetClassNameIndent(self, theClassName)
     |      Return the hierarchical level associated with the specified class
     |      for use in indenting the logging of class initialization entry and
     |      exit.
     |  
     |  tsGetTerminalPixelRectangle(self)
     |      Returns the bounding rectangle the client area of the display,
     |      i.e., without taskbars and such.
     |  
     |  tsGetTheLogger(self)
     |      Return the logger instance.
     |  
     |  tsGetTheTerminal(self, theClass)
     |      Return the terminal instance.
     |  
     |  tsGetTheTerminalScreen(self, theClass)
     |      Return the screen instance.
     |  
     |  tsGetThisOwn(self)
     |      Return MembershipFlag.
     |  
     |  tsInstallTheLoggerAccess(self, indent, theClass, applicationId)
     |      Establish connection with application logger.
     |  
     |  tsInstallTheTerminalAccess(self, indent, theClass, applicationId)
     |      Establish those display areas reserved for task bar and stdio
     |      redirection. Create links to the internal information needed
     |      to monitor and control the physical screen and virtual windows
     |      of the Graphical Text User Interface.
     |  
     |  tsRegisterClassNameAndMembershipFlag(self, theClass)
     |      Record Class Name and Membership Flag instance variables.
     |  
     |  tsUpdateEventAndAcceleratorTables(self, event, handler, source, id=-1, id2=-1, useSystemEventTable=False)
     |      Bind with event and accelerator System and User tables.
     |      
     |      event: One of the EVT_* objects that specifies the
     |             the type of event to bind.
     |      
     |      handler: A callable object to be invoked when the event is
     |               delivered to self.  Pass None to disconnect an
     |               event handler.
     |      
     |      source: Sometimes the event originates from a different window
     |              than self, but you still want to catch it in self.  (For
     |              example, a button event delivered to a frame.)  By passing
     |              the source of the event, the event handling system is able
     |              to differentiate between the same event type from different
     |              controls.
     |      
     |      id: Used to specify the event source by ID instead of instance.
     |      
     |      id2: Used when it is desirable to bind a handler to a range of ids,
     |           such as with EVT_MENU_RANGE.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tsWxObject.Object:
     |  
     |  tsGetCurrentId()
     |      Return latest ID.
     |  
     |  tsGetTheId(mySelf)
     |      Return the ID associated with this class instance.
     |  
     |  tsNewId()
     |      Create a unique ID.
     |      
     |      Remarks:
     |      Various controls and other parts of wxWidgets need an ID. Sometimes
     |      the ID may be directly provided by the user or have a predefined
     |      value, such as wxID_OPEN. Often, however, the value of the ID is
     |      unimportant and is created automatically by calling
     |      wxWindow::NewControlId or by passing wxID_ANY as the ID of an
     |      object.
     |      
     |      There are two ways to generate an ID. One way is to start at a
     |      negative number, and for each new ID, return the next smallest
     |      number. This is fine for systems that can use the full range of
     |      negative numbers for IDs, as this provides more than enough IDs
     |      and it would take a very very long time to run out and wrap
     |      around. However, some systems cannot use the full range of the
     |      ID value. Windows, for example, can only use 16 bit IDs, and
     |      only has about 32000 possible automatic IDs that can be
     |      generated by wxWindow::NewControlId. If the program runs long
     |      enough, depending on the program itself, using this first method
     |      would cause the IDs to wrap around into the positive ID range
     |      and cause possible clashes with any directly specified ID values.
     |      
     |      The other way is to keep track of the IDs returned by
     |      wxWindow::NewControlId and do not return them again until the
     |      ID is completely free and not being used by any other objects.
     |      This will make sure that the ID values do not clash with one
     |      another. This is accomplished by keeping a reference count for
     |      each of the IDs that can possibly be returned by
     |      wxWindow::NewControlId. Other IDs are not reference counted.
     |  
     |  tsRegisterId(usedId)
     |      Adjust latest ID to reflect specified new one.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxObject.Object:
     |  
     |  ClassName
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      Return MembershipFlag.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsWxObject.Object:
     |  
     |  CurrentId = 100
     |  
     |  PyApp_EventQueue = None
     |  
     |  PyApp_Object = None
     |  
     |  TheDisplay = None
     |  
     |  TheLogger = None
     |  
     |  TheTerminal = None
     |  
     |  TheTerminalScreen = None

DATA
    DEBUG = True
    DEFAULT_POS = ((-1, -1), 0)
    DEFAULT_SIZE = ((-1, -1), 0)
    VERBOSE = True
    __authors__ = 'Richard S. Gordon'
    __copyright__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll r...
    __credits__ = '\n\n  Credits: \n\n\t  tsLibGUI Import & Application .....
    __date__ = '04/01/2013'
    __header__ = '\n\ntsWxPySizer, v1.0.0 (build 04/01/2013)\n\n  Auth... ...
    __license__ = 'GNU General Public License, Version 3, 29 June 2007'
    __line1__ = 'tsWxPySizer, v1.0.0 (build 04/01/2013)'
    __line2__ = 'Author(s): Richard S. Gordon'
    __line3__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll right...
    __line4__ = 'GNU General Public License, Version 3, 29 June 2...U Gene...
    __title__ = 'tsWxPySizer'
    __version__ = '1.0.0'
    mainTitleVersionDate = 'tsWxPySizer, v1.0.0 (build 04/01/2013)'

VERSION
    1.0.0

DATE
    04/01/2013

CREDITS
    
    
      Credits: 
    
    	  tsLibGUI Import & Application Launch Features: 
    	  Copyright (c) 2007-2009 Frederick A. Kier.
    			All rights reserved.
    
    	  Python Curses Module API & Run Time Library Features:
    	  Copyright (c) 2001-2013 Python Software Foundation.
    			All rights reserved.
    	  PSF License Agreement for Python 2.7.3 & 3.3.0
    
    	  wxWidgets (formerly wxWindows) & wxPython API Features:
    	  Copyright (c) 1992-2008 Julian Smart, Robert Roebling,
    			Vadim Zeitlin and other members of the 
    			wxWidgets team.
    			All rights reserved.
    	  wxWindows Library License
    
    	  nCurses API & Run Time Library Features:
    	  Copyright (c) 1998-2011 Free Software Foundation, Inc.
    			All rights reserved.
    	  GNU General Public License, Version 3, 29 June 2007


