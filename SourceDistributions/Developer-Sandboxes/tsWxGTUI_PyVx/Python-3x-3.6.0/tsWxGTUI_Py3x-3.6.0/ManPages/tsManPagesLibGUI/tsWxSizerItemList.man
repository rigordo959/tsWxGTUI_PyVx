
Help on module tsWxSizerItemList:

NAME
    tsWxSizerItemList

FILE
    ./tsLibGUI/tsWxPkg/src/tsWxSizerItemList.py

DESCRIPTION
    tsWxSizerItemList.py - Class wraps a tsWxDoubleLinkedList class
    (rather than a wxList-based class) and gives it a Python
    sequence-like interface. Sequence operations supported are length,
    first, last, next and index access and iteration.

CLASSES
    tsWxDoubleLinkedList.DoubleLinkedList(__builtin__.object)
        SizerItemList
    
    class SizerItemList(tsWxDoubleLinkedList.DoubleLinkedList)
     |  Class wraps a tsWxDoubleLinkedList class (rather than a wxList-based
     |  class) and gives it a Python sequence-like interface. Sequence
     |  operations supported are length, first, last, next and index.
     |  
     |  NOTE: This implementation uses the "object" based DoubleLinkedList
     |  Class. It eliminate the need to build an equivalent object based Class
     |  from scratch.
     |  
     |  Method resolution order:
     |      SizerItemList
     |      tsWxDoubleLinkedList.DoubleLinkedList
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, userData=None, lifoMode=False)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxDoubleLinkedList.DoubleLinkedList:
     |  
     |  Add(self, userData)
     |      Add a node to the list tail and appropriately adjust the forward
     |      and backward links.
     |  
     |  FindIndexByNode(self, node)
     |      Return the index associated with the specified node. Return None
     |      if node not found.
     |  
     |  GetCount(self)
     |      Returns the number of children objects managed by the sizer in a
     |      list-type object.
     |      
     |      Modeled after TBD in sizer.cpp file of wxWidgets.
     |  
     |  GetFirst(self)
     |      Returns the first of the children objects managed by the sizer
     |      in a list-type object.
     |      
     |      Modeled after wxSizerItemList::compatibility_iterator in
     |      sizer.cpp file of wxWidgets.
     |  
     |  GetIndex(self, index)
     |      Returns the index specified member of the list.
     |  
     |  GetLast(self)
     |      Returns the last of the children objects managed by the sizer
     |      in a list-type object.
     |      sizer.cpp file of wxWidgets.
     |  
     |  GetNext(self)
     |      Returns the next of the children objects managed by the sizer
     |      in a list-type object.
     |      
     |      Modeled after wxSizerItemList::compatibility_iterator in
     |      sizer.cpp file of wxWidgets.
     |  
     |  InsertAfter(self, afterIndex, userData)
     |      Insert a node to the list after the specified nodetail and
     |      appropriately adjust the forward and backward links.
     |      
     |      function insertAfter(List list, Node node, Node newNode)
     |           newNode.prev := node
     |           newNode.nextNode := node.next
     |           if node.next == null
     |               list.lastNode := newNode
     |           else
     |               node.next.prev := newNode
     |           node.next := newNode
     |  
     |  InsertAsHead(self, userData)
     |      Insert a node to the list before the specified nodetail and
     |      appropriately adjust the forward and backward links.
     |      
     |      function insertBeginning(List list, Node newNode)
     |           if list.firstNode == null
     |               list.firstNode := newNode
     |               list.lastNode  := newNode
     |               newNode.prev := null
     |               newNode.nextNode := null
     |           else
     |               insertBefore(list, list.firstNode, newNode)
     |  
     |  InsertAsTail(self, userData)
     |      Insert a node at the end of the list and appropriately adjust
     |      the forward and backward links.
     |      
     |      function insertEnd(List list, Node newNode)
     |           if list.lastNode == null
     |               insertBeginning(list, newNode)
     |           else
     |               insertAfter(list, list.lastNode, newNode)
     |  
     |  InsertBefore(self, beforeIndex, userData)
     |      Insert a node to the list before the specified nodetail and
     |      appropriately adjust the forward and backward links.
     |      
     |      function insertBefore(List list, Node node, Node newNode)
     |           newNode.prev := node.prev
     |           newNode.nextNode := node
     |           if node.prev == null
     |               list.firstNode := newNode
     |           else
     |               node.prev.next := newNode
     |           node.prev    := newNode
     |  
     |  IsFIFO(self)
     |      Returns True if FIFO (not Lifo) mode.
     |  
     |  IsLIFO(self)
     |      Returns True if LIFO mode.
     |  
     |  Pop(self)
     |      Remove and return node from position appropriate for FIFO (stack)
     |      or LIFO (queue).
     |  
     |  Push(self, userData)
     |      Insert node in position appropriate for FIFO (stack) or LIFO (queue).
     |  
     |  Remove(self, node)
     |      Remove a node from the list and appropriately adjust the forward
     |      and backward links.
     |      
     |      function remove(List list, Node node)
     |         if node.prev == null
     |             list.firstNode := node.next
     |         else
     |             node.prev.next := node.next
     |         if node.next == null
     |             list.lastNode := node.prev
     |         else
     |             node.next.prev := node.prev
     |         destroy node
     |  
     |  __del__(self)
     |  
     |  getNext(self, node)
     |  
     |  getPrevious(self, node)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxDoubleLinkedList.DoubleLinkedList:
     |  
     |  Next
     |  
     |  Previous
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

DATA
    DEBUG = True
    VERBOSE = True
    __authors__ = 'Richard S. Gordon'
    __copyright__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll r...
    __credits__ = '\n\n  Credits: \n\n\t  tsLibGUI Import & Application .....
    __date__ = '04/01/2013'
    __header__ = '\n\ntsWxSizerItemList, v1.1.0 (build 04/01/2013)\n\n... ...
    __license__ = 'GNU General Public License, Version 3, 29 June 2007'
    __line1__ = 'tsWxSizerItemList, v1.1.0 (build 04/01/2013)'
    __line2__ = 'Author(s): Richard S. Gordon'
    __line3__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll right...
    __line4__ = 'GNU General Public License, Version 3, 29 June 2...U Gene...
    __title__ = 'tsWxSizerItemList'
    __version__ = '1.1.0'
    mainTitleVersionDate = 'tsWxSizerItemList, v1.1.0 (build 04/01/2013)'

VERSION
    1.1.0

DATE
    04/01/2013

CREDITS
    
    
      Credits: 
    
    	  tsLibGUI Import & Application Launch Features: 
    	  Copyright (c) 2007-2009 Frederick A. Kier.
    			All rights reserved.
    
    	  Python Curses Module API & Run Time Library Features:
    	  Copyright (c) 2001-2013 Python Software Foundation.
    			All rights reserved.
    	  PSF License Agreement for Python 2.7.3 & 3.3.0
    
    	  wxWidgets (formerly wxWindows) & wxPython API Features:
    	  Copyright (c) 1992-2008 Julian Smart, Robert Roebling,
    			Vadim Zeitlin and other members of the 
    			wxWidgets team.
    			All rights reserved.
    	  wxWindows Library License
    
    	  nCurses API & Run Time Library Features:
    	  Copyright (c) 1998-2011 Free Software Foundation, Inc.
    			All rights reserved.
    	  GNU General Public License, Version 3, 29 June 2007


