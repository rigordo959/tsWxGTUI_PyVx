
Help on module tsWxLog:

NAME
    tsWxLog

FILE
    ./tsLibGUI/tsWxPkg/src/tsWxLog.py

DESCRIPTION
    tsWxLog.py - Class defines the interface for the log targets
    used by wxWidgets logging functions as explained in the wxLog
    Classes Overview. This implementation uses the tsLogger class.

CLASSES
    tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger(__builtin__.object)
        tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger(tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger, tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts)
            Log
                LogBuffer
                LogChain
                LogGui
                LogNull
                LogRecordInfo
                LogStderr
                LogStream
                LogTextCtrl
                LogWindow
    tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts(__builtin__.object)
        tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger(tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger, tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts)
            Log
                LogBuffer
                LogChain
                LogGui
                LogNull
                LogRecordInfo
                LogStderr
                LogStream
                LogTextCtrl
                LogWindow
    
    class Log(tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger)
     |  wxLog class defines the interface for the log targets used by
     |  wxWidgets logging functions as explained in the wxLog overview.
     |  
     |  The only situations when you need to directly use this class
     |  is when you want to derive your own log target because the
     |  existing ones does not satisfy your needs.
     |  
     |  Another case is if you wish to customize the behaviour of the
     |  standard logging classes (all of which respect the wxLog
     |  settings): for example, set which trace messages are logged
     |  and which are not or change (or even remove completely) the
     |  timestamp on the messages.
     |  
     |  Otherwise, it is completely hidden behind the wxLogXXX()
     |  functions and you may not even know about its existence.
     |  
     |  See log overview for the descriptions of wxWidgets logging
     |  facilities.
     |  
     |  Method resolution order:
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogBuffer(Log)
     |  wxLogBuffer is a very simple implementation of log sink which simply
     |  collects all the logged messages in a string (except the debug
     |  messages which are output in the usual way immediately as we are
     |  presumably not interested in collecting them for later).
     |  
     |  The messages from different log function calls are separated by the
     |  new lines.
     |  
     |  All the messages collected so far can be shown to the user (and the
     |  current buffer cleared) by calling the overloaded wxLogBuffer::Flush
     |  method.
     |  
     |  Method resolution order:
     |      LogBuffer
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogChain(Log)
     |  This simple class allows you to chain log sinks, that is to install
     |  a new sink but keep passing log messages to the old one instead of
     |  replacing it completely as wxLog::SetActiveTarget does.
     |  
     |  It is especially useful when you want to divert the logs somewhere
     |  (for example to a file or a log window) but also keep showing the
     |  error messages using the standard dialogs as wxLogGui does by default.
     |  
     |  Example of usage:
     |  
     |  wxLogChain *logChain = new wxLogChain(new wxLogStderr);
     |  
     |  // all the log messages are sent to stderr and also processed as
     |  usually
     |  ...
     |  
     |  // do not delete logChain directly as this would leave a dangling
     |  // pointer as active log target, use SetActiveTarget() instead
     |  delete wxLog::SetActiveTarget(...something else or NULL...);
     |  
     |  Method resolution order:
     |      LogChain
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogGui(Log)
     |  This is the default log target for the GUI wxWidgets applications.
     |  
     |  Please see Logging Customization for explanation of how to change
     |  the default log target.
     |  
     |  An object of this class is used by default to show the log messages
     |  created by using wxLogMessage(), wxLogError() and other logging
     |  functions. It does not display the messages logged by them
     |  immediately however but accumulates all messages logged during an
     |  event handler execution and then shows them all at once when its
     |  Flush() method is called during the idle time processing. This has
     |  the important advantage of showing only a single dialog to the user
     |  even if several messages were logged because of a single error as
     |  it often happens (e.g. a low level function could log a message
     |  because it failed to open a file resulting in its caller logging
     |  another message due to the failure of higher level operation
     |  requiring the use of this file). If you need to force the display
     |  of all previously logged messages immediately you can use
     |  wxLog::FlushActive() to force the dialog display.
     |  
     |  Also notice that if an error message is logged when several
     |  informative messages had been already logged before, the informative
     |  messages are discarded on the assumption that they are not useful
     |  -- and may be confusing and hence harmful -- any more after the error.
     |  The warning and error messages are never discarded however and any
     |  informational messages logged after the first error one are also
     |  kept (as they may contain information about the error recovery).
     |  You may override DoLog() method to change this behaviour.
     |  
     |  At any rate, it is possible that that several messages were
     |  accumulated before this class Flush() method is called. If this
     |  is the case, Flush() uses a custom dialog which shows the last
     |  message directly and allows the user to view the previously logged
     |  ones by expanding the "Details" wxCollapsiblePane inside it. This
     |  custom dialog also provides the buttons for copying the log
     |  messages to the clipboard and saving them to a file.
     |  
     |  However if only a single message is present when Flush() is called,
     |  just a wxMessageBox() is used to show it. This has the advantage of
     |  being closer to the native behaviour but it does not give the user
     |  any possibility to copy or save the message (except for the recent
     |  Windows versions where Ctrl-C may be pressed in the message box to
     |  copy its contents to the clipboard) so you may want to override
     |  DoShowSingleMessage() to customize wxLogGui -- the dialogs sample
     |  shows how to do this.
     |  
     |  Method resolution order:
     |      LogGui
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogNull(Log)
     |  This class allows you to temporarily suspend logging.
     |  
     |  All calls to the log functions during the life time of an object
     |  of this class are just ignored.
     |  
     |  In particular, it can be used to suppress the log messages given
     |  by wxWidgets itself but it should be noted that it is rarely the
     |  best way to cope with this problem as all log messages are
     |  suppressed, even if they indicate a completely different error
     |  than the one the programmer wanted to suppress.
     |  
     |  For instance, the example of the overview:
     |  
     |        wxFile file;
     |  
     |        // wxFile.Open() normally complains if file cannot be
     |        opened, we do not want it
     |        {
     |          wxLogNull logNo;
     |          if ( !file.Open("bar") )
     |            ... process error ourselves ...
     |        } // ~wxLogNull called, old log sink restored
     |  
     |        wxLogMessage("..."); // ok
     |  
     |  would be better written as:
     |  
     |        wxFile file;
     |  
     |        // do not try to open file if it does not exist, we are
     |        // prepared to deal with this ourselves - but all other
     |        // errors are not expected
     |        if ( wxFile::Exists("bar") )
     |        {
     |            // gives an error message if the file could not be opened
     |            file.Open("bar");
     |        }
     |        else
     |        {
     |            ...
     |        }
     |  
     |  Method resolution order:
     |      LogNull
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogRecordInfo(Log)
     |  Information about a log record (unit of the log output).
     |  
     |  Method resolution order:
     |      LogRecordInfo
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogStderr(Log)
     |  This class can be used to redirect the log messages to a C file
     |  stream (not to be confused with C++ streams).
     |  
     |  It is the default log target for the non-GUI wxWidgets applications
     |  which send all the output to stderr.
     |  
     |  Method resolution order:
     |      LogStderr
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogStream(Log)
     |  This class can be used to redirect the log messages to a C++ stream.
     |  
     |  Please note that this class is only available if wxWidgets was
     |  compiled with the standard iostream library support
     |  (wxUSE_STD_IOSTREAM must be on).
     |  
     |  Method resolution order:
     |      LogStream
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogTextCtrl(Log)
     |  Using these target all the log messages can be redirected to a text
     |  control.
     |  
     |  The text control must have been created with wxTE_MULTILINE style
     |  by the caller previously.
     |  
     |  Method resolution order:
     |      LogTextCtrl
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    class LogWindow(Log)
     |  This class represents a background log window: to be precise, it
     |  collects all log messages in the log frame which it manages but
     |  also passes them on to the log target which was active at the
     |  moment of its creation.
     |  
     |  This allows you, for example, to show all the log messages in a
     |  frame but still continue to process them normally by showing the
     |  standard log dialog.
     |  
     |  Method resolution order:
     |      LogWindow
     |      Log
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger
     |      tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods inherited from Log:
     |  
     |  AddTraceMask(self, mask)
     |      Add the mask to the list of allowed masks for wxLogTrace.
     |      
     |      See also: RemoveTraceMask(), GetTraceMasks()
     |  
     |  ClearTraceMasks(self)
     |      Removes all trace masks previously set with AddTraceMask.
     |      
     |      See also: RemoveTraceMask()
     |  
     |  Destroy(self)
     |  
     |  DisableTimestam(self)
     |      Disables time stamping of the log messages.
     |  
     |  DoLogRecord(self, level, msg, info)
     |      Called to log a new record.
     |      
     |      Any log message created by wxLogXXX() functions is passed to this
     |      method of the active log target. The default implementation
     |      prepends the timestamp and, for some log levels (e.g. error
     |      and warning), the corresponding prefix to msg and passes it to
     |      DoLogTextAtLevel().
     |      
     |      You may override this method to implement custom formatting of
     |      the log messages or to implement custom filtering of log messages
     |      (e.g. you could discard all log messages coming from the given
     |      source file).
     |  
     |  DoLogText(self, msg)
     |      Called to log the specified string.
     |      
     |      A simple implementation might just send the string to stdout
     |      or stderr or save it in a file (of course, the already existing
     |      wxLogStderr can be used for this).
     |      
     |      The base class version of this function asserts so it must be
     |      overridden if you do not override DoLogRecord() or
     |      DoLogTextAtLevel().
     |  
     |  DoLogTextAtLevel(self, level, msg)
     |      Called to log the specified string at given level.
     |      
     |      The base class versions logs debug and trace messages on the
     |      system default debug output channel and passes all the other
     |      messages to DoLogText().
     |  
     |  DontCreateOnDemand(self)
     |      Instructs wxLog to not create new log targets on the fly if there
     |      is none currently. (Almost) for internal use only: it is supposed
     |      to be called by the application shutdown code.
     |      
     |      Note that this function also calls ClearTraceMasks.
     |  
     |  EnableLogging(self, enable=True)
     |      Globally enable or disable logging.
     |      
     |      Calling this function with false argument disables all log
     |      messages for the current thread.
     |      
     |      See also: wxLogNull, IsEnabled()
     |      
     |      Returns: The old state, i.e. true if logging was previously
     |      enabled and false if it was disabled.
     |  
     |  Flush(self)
     |      Some of wxLog implementations, most notably the standard wxLogGui
     |      class, buffer the messages (for example, to avoid showing the
     |      user a zillion of modal message boxes one after another -- which
     |      would be really annoying).
     |      
     |      This function shows them all and clears the buffer contents. If
     |      the buffer is already empty, nothing happens.
     |      
     |      If you override this method in a derived class, call the base
     |      class version first, before doing anything else.
     |      
     |      Reimplemented in wxLogGui, and wxLogBuffer.
     |  
     |  FlushActive(self)
     |      Flushes the current log target if any, does nothing if
     |      there is none.
     |      
     |      When this method is called from the main thread context, it also
     |      flushes any previously buffered messages logged by the other
     |      threads. When it is called from the other threads it simply calls
     |      Flush() on the currently active log target, so it mostly makes
     |      sense to do this if a thread has its own logger set with
     |      SetThreadActiveTarget().
     |  
     |  GetActiveTarget(self)
     |      Returns the pointer to the active log target (may be NULL).
     |      
     |      Notice that if SetActiveTarget() had not been previously explicitly
     |      called, this function will by default try to create a log target
     |      by calling wxAppTraits::CreateLogTarget() which may be overridden
     |      in a user-defined traits class to change the default behaviour.
     |      You may also call DontCreateOnDemand() to disable this behaviour.
     |      
     |      When this function is called from threads other than main one,
     |      auto-creation does not happen. But if the thread has a thread-
     |      specific log target previously set by SetThreadActiveTarget(),
     |      it is returned instead of the global one. Otherwise, the global
     |      log target is returned.
     |  
     |  GetLogLevel(self)
     |      Returns the current log level limit.
     |      
     |      All messages at levels strictly greater (i.e., tsLogger severity
     |      levels lower) than the value returned by this function are not
     |      logged at all.
     |      
     |      See also: SetLogLevel(), IsLevelEnabled()
     |  
     |  GetRepetitionCounting(self)
     |      Returns whether the repetition counting mode is enabled.
     |  
     |  GetTimestamp(self)
     |      Returns the current timestamp format string.
     |  
     |  GetTraceMasks(self)
     |      Returns the currently allowed list of string trace masks.
     |  
     |  GetVerbose(self)
     |      Returns whether the verbose mode is currently active.
     |  
     |  IsAllowedTraceMask(self, mask)
     |      Returns true if the mask is one of allowed masks for wxLogTrace().
     |  
     |  IsEnabled(self)
     |      Returns true if logging is enabled at all now.
     |      
     |      See also: IsLevelEnabled(), EnableLogging()
     |  
     |  IsLevelEnabled(self, level, component)
     |      Returns true if logging at this level is enabled for the current
     |      thread.
     |      
     |      This function only returns true if logging is globally enabled
     |      and if level is less than or equal to the maximal log level
     |      enabled for the given component.
     |      
     |      See also: IsEnabled(), SetLogLevel(), GetLogLevel(),
     |      SetComponentLevel()
     |  
     |  LogRecord(self, level, msg, info)
     |      Log the given record.
     |      
     |      This function should only be called from the DoLog()
     |      implementations in the derived classes if they need to call
     |      DoLogRecord() on another log object (they can, of course,
     |      just use wxLog::DoLogRecord() call syntax to call it on the
     |      object itself). It should not be used for logging new messages
     |      which can be only sent to the currently active logger using
     |      OnLog() which also checks if the logging (for this level) is
     |      enabled while this method just directly calls DoLog().
     |      
     |      Example of use of this class from wxLogChain:
     |      
     |      void wxLogChain::DoLogRecord(wxLogLevel level,
     |                                   const wxString& msg,
     |                                   const wxLogRecordInfo& info)
     |      {
     |          // let the previous logger show it
     |          if ( m_logOld && IsPassingMessages() )
     |              m_logOld->LogRecord(level, msg, info);
     |      
     |          // and also send it to the new one
     |          if ( m_logNew && m_logNew != this )
     |              m_logNew->LogRecord(level, msg, info);
     |      }
     |  
     |  OnLog(self, level, szString, t)
     |      Forwards the message at specified level to the DoLog() function of
     |      the active log target if there is any, does nothing otherwise.
     |  
     |  RemoveTraceMask(self, mask)
     |      Remove the mask from the list of allowed masks for wxLogTrace.
     |      
     |      See also: AddTraceMask
     |  
     |  Resume(self)
     |      Resumes logging previously suspended by a call to Suspend.
     |      
     |      All messages logged in the meanwhile will be flushed soon.
     |  
     |  SetActiveTarget(self, logtarget)
     |      Sets the specified log target as the active one. Returns the
     |      pointer to the previous active log target (may be NULL). To
     |      suppress logging use a new instance of wxLogNull not NULL.
     |      If the active log target is set to NULL a new default log
     |      target will be created when logging occurs.
     |  
     |  SetComponentLevel(self, pLogger)
     |      Sets the log level for the given component.
     |      
     |      For example, to disable all but error messages from wxWidgets
     |      network classes you may use
     |      
     |      \ wxLog::SetComponentLevel("wx/net", wxLOG_Error);
     |      
     |      SetLogLevel() may be used to set the global log level.
     |      
     |      Parameters:
     |      component       Non-empty component name, possibly using slashes
     |      (/) to separate it into several parts.
     |      
     |      level   Maximal level of log messages from this component which
     |      will be handled instead of being simply discarded.
     |  
     |  SetLogLevel(self, logLevel)
     |      Specifies that log messages with level > logLevel should be
     |      ignored and not sent to the active log target.
     |      
     |      See also: SetComponentLevel()
     |  
     |  SetRepetitionCounting(self, bRepetCounting)
     |      Enables logging mode in which a log message is logged once, and in
     |      case exactly the same message successively repeats one or more
     |      times, only the number of repetitions is logged.
     |  
     |  SetThreadActiveTarget(self, ts)
     |      Sets a thread-specific log target.
     |      
     |      The log target passed to this function will be used for all
     |      messages logged by the current thread using the usual wxLog
     |      functions. This should not be called from the main thread
     |      which never uses a thread-specific log target but can be used
     |      for the other threads to handle thread logging completely
     |      separately; instead of buffering thread log messages in the
     |      main thread logger.
     |      
     |      Notice that unlike for SetActiveTarget(), wxWidgets does not
     |      destroy the thread-specific log targets when the thread
     |      terminates so doing this is your responsibility.
     |      
     |      This method is only available if wxUSE_THREADS is 1, i.e.
     |      wxWidgets was compiled with threads support.
     |      
     |      Parameters:
     |      logger  The new thread-specific log target, possibly NULL.
     |      
     |      Returns:
     |      The previous thread-specific log target, initially NULL.
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp format prepended by the default log targets to
     |      all messages.
     |      
     |      The string may contain any normal characters as well
     |      as % prefixed format specificators, see strftime() manual for
     |      details. Passing an empty string to this function disables
     |      message timestamping.
     |  
     |  SetTraceMask(self, ulMask)
     |      Sets the trace mask, see Customization section for details.
     |  
     |  SetVerbose(self, verbose=True)
     |      Activates or deactivates verbose mode in which the verbose messages
     |      are logged as the normal ones instead of being silently dropped.
     |      
     |      The verbose messages are the trace messages which are not disabled
     |      in the release mode and are generated by wxLogVerbose().
     |      
     |      See also: wxLog Classes Overview
     |  
     |  Suspend(self)
     |      Suspends the logging until Resume is called. Note that the latter
     |      must be called the same number of times as the former to undo it,
     |      i.e. if you call Suspend() twice you must call Resume() twice as
     |      well.
     |      
     |      Note that suspending the logging means that the log sink will not
     |      be flushed periodically, it does not have any effect if the
     |      current log target does the logging immediately without waiting
     |      for Flush to be called (the standard GUI log target only shows
     |      the log dialog when it is flushed, so Suspend() works as expected
     |      with it).
     |      
     |      See also: Resume(), wxLogNull
     |  
     |  TimeStamp(self)
     |      The wxLog::DoLog() function automatically prepends a time stamp to
     |      all the messages. The format of the time stamp may be changed: it
     |      can be any string with % specifications fully described in the
     |      documentation of the standard strftime() function. For example,
     |      the default format is "[%d/%b/%y %H:%M:%S] " which gives something
     |      like "[17/Sep/98 22:10:16] " (without quotes) for the current date.
     |      Setting an empty string as the time format disables timestamping
     |      of the messages completely.
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.TsLogger:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsLibCLI.tsLoggerPkg.src.tsLogger.wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code
    
    Logger = class TsLogger(localLogger, wxPythonAsserts)
     |  Class that emulates a subset of Python logging API. It defines and
     |  handles prioritized, time and date stamped event message formatting
     |  and output to files and devices. Files are organized in a date and
     |  time stamped directory named for the launched application. Unix-type
     |  devices include syslog, stderr, stdout and stdscr (the ncurses display
     |  screen). It also supports "wxPython"-style logging of assert and
     |  check case results.
     |  
     |  Method resolution order:
     |      TsLogger
     |      localLogger
     |      wxPythonAsserts
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, **kw)
     |      Initialze the class.
     |  
     |  tsGetDefaultStandardOutputFileID(self)
     |  
     |  tsGetLoggerName(self)
     |  
     |  tsGetLoggerPath(self)
     |  
     |  tsGetLoggerThreshold(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  appLogger
     |  
     |  theLogName
     |  
     |  theLogPath
     |  
     |  theLogThreshold
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  activeLoggerIDs = {'name': 'activeLoggerIDs'}
     |  
     |  applicationName = 'pydoc'
     |  
     |  argv = ['/usr/bin/pydoc', './tsWxLog.py']
     |  
     |  defaultStandardOutputFileID = <open file '/usr/bin/logs/2014-04-09-at-...
     |  
     |  defaultStandardOutputFileName = '/usr/bin/logs/2014-04-09-at-04-00-28/...
     |  
     |  defaultStandardOutputPath = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  fileExt = ''
     |  
     |  fileLabel = '2014-04-09-at-04-00-28'
     |  
     |  fileName = 'pydoc'
     |  
     |  head = '/usr/bin'
     |  
     |  mkdirsHead = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  mkdirsMode = 511
     |  
     |  msg = ['Unable to create default log file.']
     |  
     |  path = '/usr/bin/logs/2014-04-09-at-04-00-28'
     |  
     |  tail = 'pydoc'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from localLogger:
     |  
     |  alert(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ALERT'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  close(self)
     |      Close access with self named device or file.
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'CRITICAL'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'DEBUG'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.debug("Houston, we have a %s", "thorny problem",
     |      exc_info = 1)
     |  
     |  description(self, message, title=None, level=0, width=80, initial_indent='', subsequent_indent='', indent=0, tab=4)
     |      Output timestamped message on new line.
     |  
     |  emergency(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'EMERGENCY'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.critical("Houston, we have a %s", "major disaster",
     |      exc_info = 1)
     |  
     |  error(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'ERROR'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.error("Houston, we have a %s", "major problem", exc_info = 1)
     |  
     |  event(self, message, level=0)
     |      Output timestamped message on new line.
     |  
     |  exception(self, msg, *args)
     |      Convenience method for logging an ERROR with exception information.
     |  
     |  getLogger(self, name)
     |      Get a logger with the specified name (channel name), creating it
     |      if it doesn't yet exist. This name is a dot-separated hierarchical
     |      name, such as "a", "a.b", "a.b.c" or similar.
     |      
     |      If a PlaceHolder existed for the specified name [i.e. the logger
     |      didn't exist but a child of it did], replace it with the created
     |      logger and fix up the parent/child references which pointed to the
     |      placeholder to now point to the logger.
     |  
     |  info(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'INFO'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Log 'msg % args' with the integer severity 'level'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.log(level, "We have a %s", "mysterious problem", exc_info = 1)
     |  
     |  notice(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'NOTICE'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.info("Houston, we have a %s", "interesting problem",
     |      exc_info = 1)
     |  
     |  open(self, name, mode)
     |      Create access with named device or file. NOTE: Must not be
     |      used for StandardScreenDevice.
     |  
     |  progress(self, message, level=0)
     |      Output timestamped message on same line.
     |      NOTE: Only outputs to same line.
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Log 'msg % args' with severity 'WARNING'.
     |      
     |      To pass exception information, use the keyword argument exc_info with
     |      a true value, e.g.
     |      
     |      logger.warning("Houston, we have a %s", "bit of a problem",
     |      exc_info = 1)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from localLogger:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from wxPythonAsserts:
     |  
     |  wxASSERT(self, cond)
     |      assert checks if the condition is true and calls the assert handler
     |      with a default message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxASSERT_MSG(self, cond, msg=None)
     |      assert checks if the condition is true and calls the assert handler
     |      with the provided message if it is not
     |      
     |      NB: the macro is defined like this to ensure that nested if/else
     |      statements containing it are compiled in the same way whether
     |      it is defined as empty or not
     |  
     |  wxCHECK(self, cond, rc)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK2(self, cond, op=None)
     |      check that expression is true, perform op if not
     |  
     |  wxCHECK2_MSG(self, cond, op=None, msg=None)
     |      the generic macro: takes the condition to check, the statement to
     |      be execute in case the condition is false and the message to pass
     |      to the assert handler
     |  
     |  wxCHECK_MSG(self, cond, rc, msg=None)
     |      check which returns with the specified return code if the condition
     |      fails
     |  
     |  wxCHECK_RET(self, cond, msg=None)
     |      special form of wxCHECK2: as wxCHECK, but for use in void functions
     |      
     |      NB: there is only one form (with msg parameter) and it is intentional:
     |      there is no other way to tell the caller what exactly went wrong
     |      from the void function (of course, the function should not be void
     |      to begin with...)
     |  
     |  wxFAIL(self)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_COND_MSG(self, cond, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxFAIL_MSG(self, msg=None)
     |      wxFAIL is a special form of assert: it always triggers (and so is
     |      usually used in normally unreachable code
     |  
     |  wxTRAP(self)
     |      wxTRAP is a special form of assert: it always triggers (and so is
     |      usually used in application trap handler code

DATA
    DEBUG = True
    VERBOSE = True
    __authors__ = 'Richard S. Gordon'
    __copyright__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll r...
    __credits__ = '\n\n  Credits: \n\n\t  tsLibGUI Import & Application .....
    __date__ = '04/01/2013'
    __header__ = '\n\ntsWxLog, v0.0.0 (build 04/01/2013)\n\n  Author(s... ...
    __license__ = 'GNU General Public License, Version 3, 29 June 2007'
    __line1__ = 'tsWxLog, v0.0.0 (build 04/01/2013)'
    __line2__ = 'Author(s): Richard S. Gordon'
    __line3__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll right...
    __line4__ = 'GNU General Public License, Version 3, 29 June 2...U Gene...
    __title__ = 'tsWxLog'
    __version__ = '0.0.0'
    mainTitleVersionDate = 'tsWxLog, v0.0.0 (build 04/01/2013)'

VERSION
    0.0.0

DATE
    04/01/2013

CREDITS
    
    
      Credits: 
    
    	  tsLibGUI Import & Application Launch Features: 
    	  Copyright (c) 2007-2009 Frederick A. Kier.
    			All rights reserved.
    
    	  Python Curses Module API & Run Time Library Features:
    	  Copyright (c) 2001-2013 Python Software Foundation.
    			All rights reserved.
    	  PSF License Agreement for Python 2.7.3 & 3.3.0
    
    	  wxWidgets (formerly wxWindows) & wxPython API Features:
    	  Copyright (c) 1992-2008 Julian Smart, Robert Roebling,
    			Vadim Zeitlin and other members of the 
    			wxWidgets team.
    			All rights reserved.
    	  wxWindows Library License
    
    	  nCurses API & Run Time Library Features:
    	  Copyright (c) 1998-2011 Free Software Foundation, Inc.
    			All rights reserved.
    	  GNU General Public License, Version 3, 29 June 2007


