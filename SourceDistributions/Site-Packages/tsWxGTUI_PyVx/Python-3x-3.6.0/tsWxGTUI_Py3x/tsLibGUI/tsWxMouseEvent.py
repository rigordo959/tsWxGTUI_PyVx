#! /usr/bin/env python
# "Time-stamp: <04/08/2015  8:12:11 AM rsg>"
'''
tsWxMouseEvent.py - Class that contains information about the events
generated by the mouse: they include mouse buttons press and
release events and mouse move events.
'''
#################################################################
#
# File: tsWxMouseEvent.py
#
# Purpose:
#
#    Class that contains information about the events
#    generated by the mouse: they include mouse buttons press and
#    release events and mouse move events.
#
# Usage (example):
#
#    # Import
#
#    from tsWxMouseEvent import MouseEvent
#
# Requirements:
#
#    wxPython 2.8.9.2 (New wxPyDocs)/wxWidgets 2.9.2 (Ref. Man.).
#
# Capabilities:
#
#    wxPython 2.8.9.2 (New wxPyDocs)/wxWidgets 2.9.2 (Ref. Man.).
#
# Limitations:
#
#    wxPython 2.8.9.2 (New wxPyDocs)/wxWidgets 2.9.2 (Ref. Man.).
#
# Notes:
#
#    None
#
# Methods:
#
#    wxPython 2.8.9.2 (New wxPyDocs)/wxWidgets 2.9.2 (Ref. Man.).
#
# Classes:
#
#    wxPython 2.8.9.2 (New wxPyDocs)/wxWidgets 2.9.2 (Ref. Man.).
#
# Modifications:
#
#    None.
#
# ToDo:
#
#    1. What is required to generate client relative coordinates?
#
#    2. Can class or instance varaibles be used when generating
#       client relative coordinates?
#
#################################################################

__title__     = 'tsWxMouseEvent'
__version__   = '1.0.1'
__date__      = '04/01/2013'
__authors__   = 'Richard S. Gordon'
__copyright__ = 'Copyright (c) 2007-2013 ' + \
                '%s.\n\t\tAll rights reserved.' % __authors__
__license__   = 'GNU General Public License, ' + \
                'Version 3, 29 June 2007'
__credits__   = '\n\n  Credits: ' + \
                '\n\n\t  tsLibGUI Import & Application Launch Features: ' + \
                '\n\t  Copyright (c) 2007-2009 Frederick A. Kier.' + \
                '\n\t\t\tAll rights reserved.' + \
                '\n\n\t  Python Curses Module API & ' + \
                'Run Time Library Features:' + \
                '\n\t  Copyright (c) 2001-2013 ' +\
                'Python Software Foundation.' + \
                '\n\t\t\tAll rights reserved.' + \
                '\n\t  PSF License Agreement for Python 2.7.3 & 3.3.0' + \
                '\n\n\t  wxWidgets (formerly wxWindows) & ' + \
                'wxPython API Features:' + \
                '\n\t  Copyright (c) 1992-2008 Julian Smart, ' + \
                'Robert Roebling,' + \
                '\n\t\t\tVadim Zeitlin and other members of the ' + \
                '\n\t\t\twxWidgets team.' + \
                '\n\t\t\tAll rights reserved.' + \
                '\n\t  wxWindows Library License' + \
                '\n\n\t  nCurses API & Run Time Library Features:' + \
                '\n\t  Copyright (c) 1998-2011 ' + \
                'Free Software Foundation, Inc.' + \
                '\n\t\t\tAll rights reserved.' + \
                '\n\t  GNU General Public License, ' + \
                'Version 3, 29 June 2007'

__line1__ = '%s, v%s (build %s)' % (__title__, __version__, __date__)
__line2__ = 'Author(s): %s' % __authors__
__line3__ = '%s' % __copyright__

if len( __credits__) == 0:
    __line4__ = '%s' % __license__
else:
    __line4__ = '%s%s' % (__license__, __credits__)

__header__ = '\n\n%s\n\n  %s\n  %s\n  %s\n' % (__line1__,
                                               __line2__,
                                               __line3__,
                                               __line4__)

mainTitleVersionDate = __line1__

#---------------------------------------------------------------------------

from tsWxGTUI_Py3x.tsLibCLI import tsExceptions as tse

#---------------------------------------------------------------------------

from tsWxGTUI_Py3x.tsLibGUI import tsWxGlobals as wx
from tsWxGTUI_Py3x.tsLibGUI import tsWxEvent as wxEvent

from tsWxGTUI_Py3x.tsLibGUI.tsWxPoint import Point as wxPoint
from tsWxGTUI_Py3x.tsLibGUI.tsWxMouseState import MouseState

#---------------------------------------------------------------------------

unimplemented = True

validMouseEventTypes = [
    wxEvent.wxEVT_ENTER_WINDOW,
    wxEvent.wxEVT_LEAVE_WINDOW,
    wxEvent.wxEVT_LEFT_DOWN,
    wxEvent.wxEVT_LEFT_UP,
    wxEvent.wxEVT_LEFT_DCLICK,
    wxEvent.wxEVT_MIDDLE_DOWN,
    wxEvent.wxEVT_MIDDLE_UP,
    wxEvent.wxEVT_MIDDLE_DCLICK,
    wxEvent.wxEVT_RIGHT_DOWN,
    wxEvent.wxEVT_RIGHT_UP,
    wxEvent.wxEVT_RIGHT_DCLICK,
##    wxEvent.wxEVT_MOUSE_AUX1_DOWN,
##    wxEvent.wxEVT_MOUSE_AUX1_UP,
##    wxEvent.wxEVT_MOUSE_AUX1_DCLICK,
##    wxEvent.wxEVT_MOUSE_AUX2_DOWN,
##    wxEvent.wxEVT_MOUSE_AUX2_UP,
##    wxEvent.wxEVT_MOUSE_AUX2_DCLICK,
    wxEvent.wxEVT_MOTION,
    wxEvent.wxEVT_MOUSEWHEEL
    ]

#---------------------------------------------------------------------------

##DEBUG = True
DEBUG = wx.Debug_GUI_Launch | \
        wx.Debug_GUI_Progress | \
        wx.Debug_GUI_Termination | \
        wx.Debug_GUI_Exceptions

##VERBOSE = True
VERBOSE = wx.Debug_GUI_Configuration

#---------------------------------------------------------------------------

class MouseEvent(wxEvent.Event, MouseState):
    '''
    This event class contains information about the events generated by the
    mouse: they include mouse buttons press and release events and mouse
    move events.

    All mouse events involving the buttons use wx.MOUSE_BTN_LEFT for
    the left mouse button, wx.MOUSE_BTN_MIDDLE for the middle one and
    wx.MOUSE_BTN_RIGHT for the right one. Note that not all mice have a
    middle button so a portable application should avoid relying on the
    events from it.

    Note the difference between methods like LeftDown and LeftIsDown: the
    former returns true when the event corresponds to the left mouse button
    click while the latter returns true if the left mouse button is currently
    being pressed. For example, when the user is dragging the mouse you can
    use LeftIsDown to test whether the left mouse button is (still) depressed.
    Also, by convention, if LeftDown returns true, LeftIsDown will also return
    true in wxWidgets whatever the underlying GUI behaviour is (which is
    platform-dependent). The same applies, of course, to other mouse buttons
    as well.
    '''
    # Class variables

    #-----------------------------------------------------------------------

    def __init__(self, mouseEventType=wx.EVT_NULL):
        '''
        Constructs a wx.MouseEvent.

        Events

        EVT_ENTER_WINDOW  Event sent when the mouse enters the boundaries
        of a window.

        EVT_LEAVE_WINDOW  Sent when the mouse leaves the window bounds

        EVT_LEFT_DOWN   Left mouse button down event. The handler of this
        event should normally call event.Skip() to allow the default
        processing to take place as otherwise the window under mouse
        would not get the focus.

        EVT_LEFT_UP     Left mouse button up event

        EVT_LEFT_DCLICK Left mouse button double click event
        
        EVT_MIDDLE_DOWN Middle mouse button down event

        EVT_MIDDLE_UP   Middle mouse button up event

        EVT_MIDDLE_DCLICK  Middle mouse button double click event

        EVT_RIGHT_DOWN  Right mouse button down event

        EVT_RIGHT_UP    Right mouse button up event

        EVT_RIGHT_DCLICK  Right mouse button double click event

        EVT_MOUSE_AUX1_DOWN     First extra mouse button down event

        EVT_MOUSE_AUX1_UP       First extra mouse button up event

        EVT_MOUSE_AUX1_DCLICK  First extra mouse button double click event

        EVT_MOUSE_AUX2_DOWN     Second extra mouse button down event

        EVT_MOUSE_AUX2_UP       Second extra mouse button up event

        EVT_MOUSE_AUX2_DCLICK  Second extra mouse button double click event

        EVT_MOTION  Event sent when the mouse is moving

        EVT_MOUSEWHEEL Mouse scroll wheel event

        EVT_MOUSE_EVENTS  Binds all mouse events at once.
        '''

        theClass = 'MouseEvent'

        wx.RegisterFirstCallerClassName(self, theClass)

        wxEvent.Event.__init__(self)
        MouseState.__init__(self)

        if mouseEventType not in validMouseEventTypes:
            msg = 'Invalid mouseEventType: %s' % str(mouseEventType)
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)

        # Duplicated from MouseState
        self.ts_LeftIsDown = False
        self.ts_MiddleIsDown = False
        self.ts_RightIsDown = False
        self.ts_Aux1IsDown = False
        self.ts_Aux2IsDown = False
        self.ts_X = 0
        self.ts_Y = 0

        # Local state
        self.ts_Button = False
        self.ts_ButtonDClick = False
        self.ts_ButtonDown = False
        self.ts_ButtonIsDown = False
        self.ts_ButtonUp = False
        self.ts_Dragging = False
        self.ts_Entering = False
        self.ts_Leaving = False

        self.ts_LeftDClick = False
        self.ts_LeftDown = False
        self.ts_LeftIsDown = False
        self.ts_LeftUp = False

        self.ts_MetaDown = False

        self.ts_MiddleDClick = False
        self.ts_MiddleDown = False
        self.ts_MiddleIsDown = False
        self.ts_MiddleUp = False

        self.ts_Moving = False

        self.ts_RightDClick = False
        self.ts_RightDown = False
        self.ts_RightIsDown = False
        self.ts_RightUp = False

        self.ts_LinesPerAction = 0
        self.ts_MouseEventType = mouseEventType
        self.ts_WheelDelta = 0
        self.ts_WheelRotation = 0

        self.ts_LastXY = wxPoint(self.ts_X, self.ts_Y)
        self.ts_ChangeXY = wxPoint(self.ts_X, self.ts_Y) - self.ts_LastXY

        self.tsBeginClassRegistration(theClass, wx.ID_ANY)
 
##        self.thisown = theClass

        self.tsEndClassRegistration(theClass)

    #-----------------------------------------------------------------------

    def __del__(self):
        '''
        '''
        del self

    #-----------------------------------------------------------------------
 
    def Button(self, but=wx.MOUSE_BTN_ANY):
        '''
        If the argument is omitted, this returns true if the event was any
        mouse changing event.
        '''
        if but == wx.MOUSE_BTN_ANY:
            return (self.ButtonUp() | \
                    self.ButtonDown() | \
                    self.ButtonDClick())

        elif but == wx.MOUSE_BTN_LEFT:
            return (self.LeftUp() | \
                    self.LeftDown() | \
                    self.LeftDClick())

        elif but == wx.MOUSE_BTN_MIDDLE:
            return (self.MiddleUp() | \
                    self.MiddleDown() | \
                    self.MiddleDClick())

        elif but == wx.MOUSE_BTN_RIGHT:
            return (self.RightUp() | \
                    self.RightDown() | \
                    self.RightDClick())

        else:
            print('ERROR: invalid parameter in wxMouseEvent.Button')

    #-----------------------------------------------------------------------
 
    def ButtonDClick(self, but=wx.MOUSE_BTN_ANY):
        '''
        If the argument is omitted, this returns true if the event was any
        mouse double click event.
        '''
        if but == wx.MOUSE_BTN_ANY:
            return (self.LeftDClick() | \
                    self.MiddleDClick() | \
                    self.RightDClick())

        elif but == wx.MOUSE_BTN_LEFT:
            return (self.LeftDClick())

        elif but == wx.MOUSE_BTN_MIDDLE:
            return (self.MiddleDClick())

        elif but == wx.MOUSE_BTN_RIGHT:
            return (self.RightDClick())

        else:
            print('ERROR: invalid parameter in wxMouseEvent.ButtonDClick')

    #-----------------------------------------------------------------------
 
    def ButtonDown(self, but=wx.MOUSE_BTN_ANY):
        '''
        If the argument is omitted, this returns true if the event was any
        mouse button down event.
        '''
        if but == wx.MOUSE_BTN_ANY:
            return (self.LeftDown() | \
                    self.MiddleDown() | \
                    self.RightDown())

        elif but == wx.MOUSE_BTN_LEFT:
            return (self.LeftDown())

        elif but == wx.MOUSE_BTN_MIDDLE:
            return (self.MiddleDown())

        elif but == wx.MOUSE_BTN_RIGHT:
            return (self.RightDown())

        else:
            print('ERROR: invalid parameter in wxMouseEvent.ButtonDown')

    #-----------------------------------------------------------------------
 
    def ButtonIsDown(self, but=wx.MOUSE_BTN_ANY):
        '''
        If the argument is omitted, this returns true if any mouse button
        is down at the time of the event.
        '''
        if but == wx.MOUSE_BTN_ANY:
            return (self.LeftIsDown() | \
                    self.MiddleIsDown() | \
                    self.RightIsDown())

        elif but == wx.MOUSE_BTN_LEFT:
            return (self.LeftIsDown())

        elif but == wx.MOUSE_BTN_MIDDLE:
            return (self.MiddleIsDown())

        elif but == wx.MOUSE_BTN_RIGHT:
            return (self.RightIsDown())

        else:
            print('ERROR: invalid parameter in wxMouseEvent.ButtonIsDown')

    #-----------------------------------------------------------------------
 
    def ButtonUp(self, but=wx.MOUSE_BTN_ANY):
        '''
        If the argument is omitted, this returns true if the event was any
        mouse button up event.
        '''
        if but == wx.MOUSE_BTN_ANY:
            return (self.LeftUp() | \
                    self.MiddleUp() | \
                    self.RightUp())

        elif but == wx.MOUSE_BTN_LEFT:
            return (self.LeftUp())

        elif but == wx.MOUSE_BTN_MIDDLE:
            return (self.MiddleUp())

        elif but == wx.MOUSE_BTN_RIGHT:
            return (self.RightUp())

        else:
            print('ERROR: invalid parameter in wxMouseEvent.ButtonUp')

    #-----------------------------------------------------------------------
 
    def Dragging(self):
        '''
        TBD - Returns true if this was a dragging event (motion while a
        button is depressed).
        '''
        return (self.ts_ChangeXY and self.ButtonDown())

    #-----------------------------------------------------------------------
 
    def Entering(self):
        '''
        Returns true if the mouse was entering the window.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'Entering in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def GetButton(self):
        '''
        Returns the mouse button which generated this event or
        wx.MOUSE_BTN_NONE if no button is involved (for mouse move,
        enter or leave event, for example).
        '''
        for i in [wx.MOUSE_BTN_LEFT,
                  wx.MOUSE_BTN_MIDDLE,
                  wx.MOUSE_BTN_RIGHT]:

            if self.Button(but=i):
                return (i)

        return (wx.MOUSE_BTN_NONE)

    #-----------------------------------------------------------------------
 
    def GetLinesPerAction(self):
        '''
        Returns the configured number of lines (or whatever) to be scrolled
        per wheel action.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % \
                  'GetLinesPerAction in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (self.ts_LinesPerAction)

    #-----------------------------------------------------------------------
 
    def GetLogicalPosition(self, dc):
        '''
        Returns the logical mouse position in pixels (i.e.
        '''
        delta = wxPoint(self.ts_X, self.ts_Y) - dc
        return (delta)

    #-----------------------------------------------------------------------
 
    def GetPosition(self):
        '''
        Returns the pixel position of the mouse in window coordinates when
        the event happened.
        '''
        return (wxPoint(self.ts_X, self.ts_Y))

    #-----------------------------------------------------------------------
 
    def GetPositionTuple(self):
        '''
        Returns the pixel position of the mouse in window coordinates when
        the event happened.
        '''
        return (self.ts_X, self.ts_Y)

    #-----------------------------------------------------------------------
 
    def GetWheelDelta(self):
        '''
        Get wheel delta, normally 120.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'GetWheelDelta in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (self.ts_WheelDelta)

    #-----------------------------------------------------------------------
 
    def GetWheelRotation(self):
        '''
        Get wheel rotation, positive or negative indicates direction of
        rotation.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % \
                  'GetWheelRotation in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (self.ts_WheelRotation)

    #-----------------------------------------------------------------------
 
    def GetX(self):
        '''
        Returns X coordinate of the physical mouse event position.
        '''
        return (self.ts_X)

    #-----------------------------------------------------------------------

    def GetY(self):
        '''
        Returns Y coordinate of the physical mouse event position.
        '''
        return (self.ts_Y)

    #-----------------------------------------------------------------------

    def IsButton(self):
        '''
        Returns true if the event was a mouse button event (not necessarily
        a button down event - that may be tested using ButtonDown).
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'IsButton in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def IsPageScroll(self):
        '''
        Returns true if the system has been setup to do page scrolling with
        the mouse wheel instead of line scrolling.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'IsPageScroll in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def Leaving(self):
        '''
        Returns true if the mouse was leaving the window.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'Leaving in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def LeftDClick(self):
        '''
        Returns true if the event was a left button double click.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'LeftDClick in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def LeftDown(self):
        '''
        TBD - Returns true if the left mouse button state changed to down.

        The handler of this event should normally call event.Skip() to allow
        the default processing to take place as otherwise the window under
        mouse would not get the focus.
        '''
        return (self.ts_LeftDown)

    #-----------------------------------------------------------------------
 
    def LeftIsDown(self):
        '''
        TBD - Returns true if the left mouse button is currently down,
        independent of the current event type.
        '''
        return (self.ts_LeftDown)

    #-----------------------------------------------------------------------
 
    def LeftUp(self):
        '''
        TBD - Returns true if the left mouse button state changed to up.
        '''
        return (not self.ts_LeftDown)

    #-----------------------------------------------------------------------
 
    def MetaDown(self):
        '''
        Returns true if the Meta key was down at the time of the event.
        '''
        return (self.ts_MetaDown)

    #-----------------------------------------------------------------------

    def MiddleDClick(self):
        '''
        Returns true if the event was a middle button double click.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'MiddleDClick in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def MiddleDown(self):
        '''
        Returns true if the middle mouse button state changed to down.
        '''
        return (self.ts_MiddleDown)

    #-----------------------------------------------------------------------
 
    def MiddleIsDown(self):
        '''
        TBD - Returns true if the middle mouse button is currently down,
        independent of the current event type.
        '''
        return (self.ts_MiddleDown)

    #-----------------------------------------------------------------------
 
    def MiddleUp(self):
        '''
        TBD - Returns true if the middle mouse button state changed to up.
        '''
        return (not self.ts_MiddleDown)

    #-----------------------------------------------------------------------
 
    def Moving(self):
        '''
        Returns true if this was a motion event and no mouse buttons were
        pressed.
        '''
        return ((self.ts_ChangeXY != wxPoint(0, 0)) and \
                (not self.ButtonDown()))

    #-----------------------------------------------------------------------
 
    def RightDClick(self):
        '''
        TBD - Returns true if the event was a right button double click.
        '''
        if unimplemented:
            msg = 'NotImplementedError: %s' % 'RightDClick in tsWxMouseEvent'
            self.logger.error(msg)
            raise tse.ProgramException(tse.APPLICATION_TRAP, msg)
        else:
            return (False)

    #-----------------------------------------------------------------------
 
    def RightDown(self):
        '''
        Returns true if the right mouse button state changed to down.
        '''
        return (self.ts_RightDown)

    #-----------------------------------------------------------------------
 
    def RightIsDown(self):
        '''
        TBD - Returns true if the right mouse button is currently down,
        independent of the current event type.
        '''
        return (self.ts_RightDown)

    #-----------------------------------------------------------------------
 
    def RightUp(self):
        '''
        Returns true if the right mouse button state changed to up.
        '''
        return (not self.ts_RightDown)

    #-----------------------------------------------------------------------
    # Begin tsWx API Extensions

    def tsAssign(self, event):
        '''
        Derived from: wxPython-src-2.8.10.1\src\common\event.cpp
        '''
        self.ts_MouseEventType = event.ts_EventType

        self.ts_X = event.m_x
        self.ts_Y = event.m_y

        self.ts_LeftDown = event.m_leftDown
        self.ts_MiddleDown = event.m_middleDown
        self.ts_RightDown = event.m_rightDown

        self.ts_ControlDown = event.m_controlDown
        self.ts_ShiftDown = event.m_shiftDown
        self.ts_AltDown = event.m_altDown
        self.ts_MetaDown = event.m_metaDown

        self.ts_WheelRotation = event.m_wheelRotation
        self.ts_WheelDelta = event.m_wheelDelta
        self.ts_LinesPerAction = event.m_linesPerAction

        self.ts_ChangeXY = wxPoint(self.ts_X,
                                   self.ts_Y) - self.ts_LastXY

        self.ts_LastXY = wxPoint(self.ts_X, self.ts_Y)

    # End tsWx API Extensions
    #-----------------------------------------------------------------------

    Button = property(GetButton)
    LinesPerAction = property(GetLinesPerAction)
    LogicalPosition = property(GetLogicalPosition)
##    m_altDown
##    m_controlDown
##    m_leftDown
##    m_linesPerAction
##    m_metaDown
##    m_middleDown
##    m_rightDown
##    m_shiftDown
##    m_wheelDelta
##    m_wheelRotation
##    m_x
##    m_y
    Position = property(GetPosition)
    WheelDelta = property(GetWheelDelta)
    WheelRotation = property(GetWheelRotation)
    X = property(GetX)
    Y = property(GetY)

#---------------------------------------------------------------------------
 
if __name__ == '__main__':

    print(__header__)
