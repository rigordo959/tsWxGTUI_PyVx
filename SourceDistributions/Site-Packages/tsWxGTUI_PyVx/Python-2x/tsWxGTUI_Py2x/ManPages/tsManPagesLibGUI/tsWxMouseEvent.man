
Help on module tsWxMouseEvent:

NAME
    tsWxMouseEvent

FILE
    /tsWxMouseEvent.py

DESCRIPTION
    tsWxMouseEvent.py - Class that contains information about the events
    generated by the mouse: they include mouse buttons press and
    release events and mouse move events.

CLASSES
    tsWxEvent.Event(tsWxObject.Object)
        MouseEvent(tsWxEvent.Event, tsWxMouseState.MouseState)
    tsWxMouseState.MouseState(tsWxKeyboardState.KeyboardState)
        MouseEvent(tsWxEvent.Event, tsWxMouseState.MouseState)
    
    class MouseEvent(tsWxEvent.Event, tsWxMouseState.MouseState)
     |  This event class contains information about the events generated by the
     |  mouse: they include mouse buttons press and release events and mouse
     |  move events.
     |  
     |  All mouse events involving the buttons use wx.MOUSE_BTN_LEFT for
     |  the left mouse button, wx.MOUSE_BTN_MIDDLE for the middle one and
     |  wx.MOUSE_BTN_RIGHT for the right one. Note that not all mice have a
     |  middle button so a portable application should avoid relying on the
     |  events from it.
     |  
     |  Note the difference between methods like LeftDown and LeftIsDown: the
     |  former returns true when the event corresponds to the left mouse button
     |  click while the latter returns true if the left mouse button is currently
     |  being pressed. For example, when the user is dragging the mouse you can
     |  use LeftIsDown to test whether the left mouse button is (still) depressed.
     |  Also, by convention, if LeftDown returns true, LeftIsDown will also return
     |  true in wxWidgets whatever the underlying GUI behaviour is (which is
     |  platform-dependent). The same applies, of course, to other mouse buttons
     |  as well.
     |  
     |  Method resolution order:
     |      MouseEvent
     |      tsWxEvent.Event
     |      tsWxObject.Object
     |      tsWxMouseState.MouseState
     |      tsWxKeyboardState.KeyboardState
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ButtonDClick(self, but=-1)
     |      If the argument is omitted, this returns true if the event was any
     |      mouse double click event.
     |  
     |  ButtonDown(self, but=-1)
     |      If the argument is omitted, this returns true if the event was any
     |      mouse button down event.
     |  
     |  ButtonIsDown(self, but=-1)
     |      If the argument is omitted, this returns true if any mouse button
     |      is down at the time of the event.
     |  
     |  ButtonUp(self, but=-1)
     |      If the argument is omitted, this returns true if the event was any
     |      mouse button up event.
     |  
     |  Dragging(self)
     |      TBD - Returns true if this was a dragging event (motion while a
     |      button is depressed).
     |  
     |  Entering(self)
     |      Returns true if the mouse was entering the window.
     |  
     |  GetButton(self)
     |      Returns the mouse button which generated this event or
     |      wx.MOUSE_BTN_NONE if no button is involved (for mouse move,
     |      enter or leave event, for example).
     |  
     |  GetLinesPerAction(self)
     |      Returns the configured number of lines (or whatever) to be scrolled
     |      per wheel action.
     |  
     |  GetLogicalPosition(self, dc)
     |      Returns the logical mouse position in pixels (i.e.
     |  
     |  GetPosition(self)
     |      Returns the pixel position of the mouse in window coordinates when
     |      the event happened.
     |  
     |  GetPositionTuple(self)
     |      Returns the pixel position of the mouse in window coordinates when
     |      the event happened.
     |  
     |  GetWheelDelta(self)
     |      Get wheel delta, normally 120.
     |  
     |  GetWheelRotation(self)
     |      Get wheel rotation, positive or negative indicates direction of
     |      rotation.
     |  
     |  GetX(self)
     |      Returns X coordinate of the physical mouse event position.
     |  
     |  GetY(self)
     |      Returns Y coordinate of the physical mouse event position.
     |  
     |  IsButton(self)
     |      Returns true if the event was a mouse button event (not necessarily
     |      a button down event - that may be tested using ButtonDown).
     |  
     |  IsPageScroll(self)
     |      Returns true if the system has been setup to do page scrolling with
     |      the mouse wheel instead of line scrolling.
     |  
     |  Leaving(self)
     |      Returns true if the mouse was leaving the window.
     |  
     |  LeftDClick(self)
     |      Returns true if the event was a left button double click.
     |  
     |  LeftDown(self)
     |      TBD - Returns true if the left mouse button state changed to down.
     |      
     |      The handler of this event should normally call event.Skip() to allow
     |      the default processing to take place as otherwise the window under
     |      mouse would not get the focus.
     |  
     |  LeftIsDown(self)
     |      TBD - Returns true if the left mouse button is currently down,
     |      independent of the current event type.
     |  
     |  LeftUp(self)
     |      TBD - Returns true if the left mouse button state changed to up.
     |  
     |  MetaDown(self)
     |      Returns true if the Meta key was down at the time of the event.
     |  
     |  MiddleDClick(self)
     |      Returns true if the event was a middle button double click.
     |  
     |  MiddleDown(self)
     |      Returns true if the middle mouse button state changed to down.
     |  
     |  MiddleIsDown(self)
     |      TBD - Returns true if the middle mouse button is currently down,
     |      independent of the current event type.
     |  
     |  MiddleUp(self)
     |      TBD - Returns true if the middle mouse button state changed to up.
     |  
     |  Moving(self)
     |      Returns true if this was a motion event and no mouse buttons were
     |      pressed.
     |  
     |  RightDClick(self)
     |      TBD - Returns true if the event was a right button double click.
     |  
     |  RightDown(self)
     |      Returns true if the right mouse button state changed to down.
     |  
     |  RightIsDown(self)
     |      TBD - Returns true if the right mouse button is currently down,
     |      independent of the current event type.
     |  
     |  RightUp(self)
     |      Returns true if the right mouse button state changed to up.
     |  
     |  __del__(self)
     |  
     |  __init__(self, mouseEventType=0)
     |      Constructs a wx.MouseEvent.
     |      
     |      Events
     |      
     |      EVT_ENTER_WINDOW  Event sent when the mouse enters the boundaries
     |      of a window.
     |      
     |      EVT_LEAVE_WINDOW  Sent when the mouse leaves the window bounds
     |      
     |      EVT_LEFT_DOWN   Left mouse button down event. The handler of this
     |      event should normally call event.Skip() to allow the default
     |      processing to take place as otherwise the window under mouse
     |      would not get the focus.
     |      
     |      EVT_LEFT_UP     Left mouse button up event
     |      
     |      EVT_LEFT_DCLICK Left mouse button double click event
     |      
     |      EVT_MIDDLE_DOWN Middle mouse button down event
     |      
     |      EVT_MIDDLE_UP   Middle mouse button up event
     |      
     |      EVT_MIDDLE_DCLICK  Middle mouse button double click event
     |      
     |      EVT_RIGHT_DOWN  Right mouse button down event
     |      
     |      EVT_RIGHT_UP    Right mouse button up event
     |      
     |      EVT_RIGHT_DCLICK  Right mouse button double click event
     |      
     |      EVT_MOUSE_AUX1_DOWN     First extra mouse button down event
     |      
     |      EVT_MOUSE_AUX1_UP       First extra mouse button up event
     |      
     |      EVT_MOUSE_AUX1_DCLICK  First extra mouse button double click event
     |      
     |      EVT_MOUSE_AUX2_DOWN     Second extra mouse button down event
     |      
     |      EVT_MOUSE_AUX2_UP       Second extra mouse button up event
     |      
     |      EVT_MOUSE_AUX2_DCLICK  Second extra mouse button double click event
     |      
     |      EVT_MOTION  Event sent when the mouse is moving
     |      
     |      EVT_MOUSEWHEEL Mouse scroll wheel event
     |      
     |      EVT_MOUSE_EVENTS  Binds all mouse events at once.
     |  
     |  tsAssign(self, event)
     |      Derived from: wxPython-src-2.8.10.1\src\common\event.cpp
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  Button
     |      Returns the mouse button which generated this event or
     |      wx.MOUSE_BTN_NONE if no button is involved (for mouse move,
     |      enter or leave event, for example).
     |  
     |  LinesPerAction
     |      Returns the configured number of lines (or whatever) to be scrolled
     |      per wheel action.
     |  
     |  LogicalPosition
     |      Returns the logical mouse position in pixels (i.e.
     |  
     |  Position
     |      Returns the pixel position of the mouse in window coordinates when
     |      the event happened.
     |  
     |  WheelDelta
     |      Get wheel delta, normally 120.
     |  
     |  WheelRotation
     |      Get wheel rotation, positive or negative indicates direction of
     |      rotation.
     |  
     |  X
     |      Returns X coordinate of the physical mouse event position.
     |  
     |  Y
     |      Returns Y coordinate of the physical mouse event position.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxEvent.Event:
     |  
     |  CanVeto(self)
     |  
     |  Clone(self)
     |      Returns a copy of the event.
     |      
     |      Any event that is posted to the wxWidgets event system for later
     |      action (via wxEvtHandler::AddPendingEvent, wxEvtHandler::QueueEvent
     |      or wxPostEvent()) must implement this method.
     |      
     |      All wxWidgets events fully implement this method, but any derived
     |      events implemented by the user should also implement this method
     |      just in case they (or some event derived from them) are ever posted.
     |      
     |      All wxWidgets events implement a copy constructor, so the easiest
     |      way of implementing the Clone function is to implement a copy
     |      constructor for a new event (call it MyEvent) and then define the
     |      Clone function like this:
     |      
     |      wxEvent *Clone() const { return new MyEvent(*this); }
     |  
     |  GetEventCategory(self)
     |      Returns a generic category for this event.
     |      
     |      wxEvent implementation returns wxEVT_CATEGORY_UI by default.
     |      
     |      This function is used to selectively process events in
     |      wxEventLoopBase::YieldFor.
     |  
     |  GetEventCriteria(self)
     |      Returns the criteria for generating this event.
     |      
     |      wxEvent implementation returns None by default.
     |  
     |  GetEventData(self)
     |      Returns instance specific data for this event.
     |  
     |  GetEventSource(self)
     |      Returns the identifier of the given event source.
     |  
     |  GetEventType(self)
     |      Returns the identifier of the given event type, such as
     |      wxEVT_COMMAND_BUTTON_CLICKED.
     |  
     |  GetId(self)
     |      Returns the identifier associated with this event, such as a button
     |      command id.
     |  
     |  GetSkipped(self)
     |      Returns true if the event handler should be skipped, false otherwise.
     |  
     |  GetTimestamp(self)
     |      Gets the timestamp for the event.
     |      
     |      The timestamp is the time in milliseconds since some fixed moment
     |      (not necessarily the standard Unix Epoch, so only differences
     |      between the timestamps and not their absolute values usually make
     |      sense).
     |      
     |      Warning:
     |      
     |      wxWidgets returns a non-NULL timestamp only for mouse and key
     |      events (see wxMouseEvent and wxKeyEvent).
     |  
     |  GetVeto(self)
     |  
     |  IsCommandEvent(self)
     |      Returns true if the event is or is derived from wxCommandEvent
     |      else it returns false.
     |      
     |      Note: Exists only for optimization purposes.
     |  
     |  ResumePropagation(self, propagationLevel)
     |      Sets the propagation level to the given value (for example returned
     |      from an earlier call to wxEvent::StopPropagation).
     |  
     |  SetCanVeto(self, canVeto=True)
     |  
     |  SetEventCategory(self, category=1)
     |      Sets the category forthis event.
     |      
     |      wxEvent implementation sets wxEVT_CATEGORY_UI by default.
     |  
     |  SetEventCriteria(self, criteria=None)
     |      Sets the criteria for generating this event.
     |      
     |      wxEvent implementation sets None by default.
     |  
     |  SetEventData(self, data)
     |      Sets the event data.
     |  
     |  SetEventSource(self, src)
     |      Sets the event source.
     |  
     |  SetEventType(self, typ)
     |      Sets the event type.
     |  
     |  SetId(self, id)
     |      Sets the identifier associated with this event, such as a button
     |      command id.
     |  
     |  SetSkipped(self, skip)
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp for the event.
     |  
     |  SetWasProcessed(self, processed)
     |  
     |  ShouldProcessOnlyIn(self)
     |  
     |  ShouldPropagate(self)
     |      Test if this event should be propagated or not, i.e.
     |      if the propagation level is currently greater than 0.
     |  
     |  Skip(self, skip=True)
     |      This method can be used inside an event handler to control whether
     |      further event handlers bound to this event will be called after the
     |      current one returns.
     |      
     |      Without Skip() (or equivalently if Skip(false) is used), the event
     |      will not be processed any more. If Skip(true) is called, the event
     |      processing system continues searching for a further handler function
     |      for this event, even though it has been processed already in the
     |      current handler.
     |      
     |      In general, it is recommended to skip all non-command events to allow
     |      the default handling to take place. The command events are, however,
     |      normally not skipped as usually a single command such as a button
     |      click or menu item selection must only be processed by one handler.
     |  
     |  StopPropagation(self)
     |      Stop the event from propagating to its parent window.
     |      
     |      Returns the old propagation level value which may be later passed
     |      to ResumePropagation() to allow propagating the event again.
     |  
     |  Veto(self, veto=True)
     |  
     |  WasProcessed(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tsWxEvent.Event:
     |  
     |  tsGetCurrentEvtId()
     |      Return latest ID.
     |  
     |  tsNewEvtId()
     |      Create a unique ID.
     |  
     |  tsRegisterId(usedId)
     |      Adjust latest ID to reflect specified new one.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxEvent.Event:
     |  
     |  EventCriteria
     |      Returns the criteria for generating this event.
     |      
     |      wxEvent implementation returns None by default.
     |  
     |  EventData
     |      Returns instance specific data for this event.
     |  
     |  EventSource
     |      Returns the identifier of the given event source.
     |  
     |  EventTimestamp
     |      Gets the timestamp for the event.
     |      
     |      The timestamp is the time in milliseconds since some fixed moment
     |      (not necessarily the standard Unix Epoch, so only differences
     |      between the timestamps and not their absolute values usually make
     |      sense).
     |      
     |      Warning:
     |      
     |      wxWidgets returns a non-NULL timestamp only for mouse and key
     |      events (see wxMouseEvent and wxKeyEvent).
     |  
     |  EventType
     |      Returns the identifier of the given event type, such as
     |      wxEVT_COMMAND_BUTTON_CLICKED.
     |  
     |  Id
     |      Returns the identifier associated with this event, such as a button
     |      command id.
     |  
     |  Skipped
     |      Returns true if the event handler should be skipped, false otherwise.
     |  
     |  Timestamp
     |      Gets the timestamp for the event.
     |      
     |      The timestamp is the time in milliseconds since some fixed moment
     |      (not necessarily the standard Unix Epoch, so only differences
     |      between the timestamps and not their absolute values usually make
     |      sense).
     |      
     |      Warning:
     |      
     |      wxWidgets returns a non-NULL timestamp only for mouse and key
     |      events (see wxMouseEvent and wxKeyEvent).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsWxEvent.Event:
     |  
     |  CurrentEvtId = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxObject.Object:
     |  
     |  Destroy(self)
     |      Deletes the C++ object this Python object is a proxy for.
     |  
     |  GetClassInfo(self)
     |      Return information about the class.
     |  
     |  GetClassName(self)
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  IsSameAs(self, p)
     |      For wx.Objects that use C++ reference counting internally, this
     |      method can be used to determine if two objects are referencing
     |      the same data object.
     |  
     |  tsBeginClassRegistration(self, theClass, applicationId)
     |      Establish connection with application logger. Log the beginning of
     |      class registration.
     |      
     |      Establish application access to display top-level window and to
     |      curses screen and windows.
     |  
     |  tsEndClassRegistration(self, theClass)
     |      Log the ending of class registration.
     |  
     |  tsGetClassNameIndent(self, theClassName)
     |      Return the hierarchical level associated with the specified class
     |      for use in indenting the logging of class initialization entry and
     |      exit.
     |  
     |  tsGetTerminalPixelRectangle(self)
     |      Returns the bounding rectangle the client area of the display,
     |      i.e., without taskbars and such.
     |  
     |  tsGetTheLogger(self)
     |      Return the logger instance.
     |  
     |  tsGetTheTerminal(self, theClass)
     |      Return the terminal instance.
     |  
     |  tsGetTheTerminalScreen(self, theClass)
     |      Return the screen instance.
     |  
     |  tsGetThisOwn(self)
     |      Return MembershipFlag.
     |  
     |  tsInstallTheLoggerAccess(self, indent, theClass, applicationId)
     |      Establish connection with application logger.
     |  
     |  tsInstallTheTerminalAccess(self, indent, theClass, applicationId)
     |      Establish those display areas reserved for task bar and stdio
     |      redirection. Create links to the internal information needed
     |      to monitor and control the physical screen and virtual windows
     |      of the Graphical Text User Interface.
     |  
     |  tsRegisterClassNameAndMembershipFlag(self, theClass)
     |      Record Class Name and Membership Flag instance variables.
     |  
     |  tsUpdateEventAndAcceleratorTables(self, event, handler, source, id=-1, id2=-1, useSystemEventTable=False)
     |      Bind with event and accelerator System and User tables.
     |      
     |      event: One of the EVT_* objects that specifies the
     |             the type of event to bind.
     |      
     |      handler: A callable object to be invoked when the event is
     |               delivered to self.  Pass None to disconnect an
     |               event handler.
     |      
     |      source: Sometimes the event originates from a different window
     |              than self, but you still want to catch it in self.  (For
     |              example, a button event delivered to a frame.)  By passing
     |              the source of the event, the event handling system is able
     |              to differentiate between the same event type from different
     |              controls.
     |      
     |      id: Used to specify the event source by ID instead of instance.
     |      
     |      id2: Used when it is desirable to bind a handler to a range of ids,
     |           such as with EVT_MENU_RANGE.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tsWxObject.Object:
     |  
     |  tsGetCurrentId()
     |      Return latest ID.
     |  
     |  tsGetTheId(mySelf)
     |      Return the ID associated with this class instance.
     |  
     |  tsNewId()
     |      Create a unique ID.
     |      
     |      Remarks:
     |      Various controls and other parts of wxWidgets need an ID. Sometimes
     |      the ID may be directly provided by the user or have a predefined
     |      value, such as wxID_OPEN. Often, however, the value of the ID is
     |      unimportant and is created automatically by calling
     |      wxWindow::NewControlId or by passing wxID_ANY as the ID of an
     |      object.
     |      
     |      There are two ways to generate an ID. One way is to start at a
     |      negative number, and for each new ID, return the next smallest
     |      number. This is fine for systems that can use the full range of
     |      negative numbers for IDs, as this provides more than enough IDs
     |      and it would take a very very long time to run out and wrap
     |      around. However, some systems cannot use the full range of the
     |      ID value. Windows, for example, can only use 16 bit IDs, and
     |      only has about 32000 possible automatic IDs that can be
     |      generated by wxWindow::NewControlId. If the program runs long
     |      enough, depending on the program itself, using this first method
     |      would cause the IDs to wrap around into the positive ID range
     |      and cause possible clashes with any directly specified ID values.
     |      
     |      The other way is to keep track of the IDs returned by
     |      wxWindow::NewControlId and do not return them again until the
     |      ID is completely free and not being used by any other objects.
     |      This will make sure that the ID values do not clash with one
     |      another. This is accomplished by keeping a reference count for
     |      each of the IDs that can possibly be returned by
     |      wxWindow::NewControlId. Other IDs are not reference counted.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxObject.Object:
     |  
     |  ClassName
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      Return MembershipFlag.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsWxObject.Object:
     |  
     |  CurrentId = 100
     |  
     |  PyApp_EventQueue = None
     |  
     |  PyApp_Object = None
     |  
     |  TheDisplay = None
     |  
     |  TheLogger = None
     |  
     |  TheTerminal = None
     |  
     |  TheTerminalScreen = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxMouseState.MouseState:
     |  
     |  Aux1IsDown(self)
     |      Returns true if the first extra mouse button is currently down.
     |  
     |  Aux2IsDown(self)
     |      Returns true if the second extra mouse button is currently down.
     |  
     |  SetAux1IsDown(self, down)
     |      Sets the first extra mouse button state at the time of the event.
     |  
     |  SetAux2IsDown(self, down)
     |      Sets the second extra mouse button state at the time of the event.
     |  
     |  SetLeftIsDown(self, down)
     |      Sets the Left mouse button state at the time of the event.
     |  
     |  SetMiddleIsDown(self, down)
     |      Sets the Middle mouse button state at the time of the event.
     |  
     |  SetRightIsDown(self, down)
     |      Sets the Right mouse button state at the time of the event.
     |  
     |  SetX(self, x)
     |      Sets the X coordinate of the physical mouse event position.
     |  
     |  SetY(self, y)
     |      Sets the Y coordinate of the physical mouse event position.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxKeyboardState.KeyboardState:
     |  
     |  AltDown(self)
     |      Returns true if the Alt key is pressed.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.
     |  
     |  CmdDown(self)
     |      Returns true if the key used for command accelerators is pressed.
     |      
     |      Cmd is a pseudo key which is Control for PC and Unix platforms but
     |      Apple (or Command) key under Macs: it makes often sense to use it
     |      instead of ControlDown() because Command key is used for the same
     |      thing under Mac as Control elsewhere (even though Control still
     |      exists, it is usually not used for the same purpose under Mac).
     |      
     |      Notice that GetModifiers() should usually be used instead of this
     |      one. However, the Apple "Cmd" (Command) is Not supported, by
     |      Ncurses, on computer platforms running Mac OS X, Linux or Windows.
     |  
     |  ControlDown(self)
     |      Returns true if the Control key is pressed.
     |      
     |      This function does not distinguish between right and left control
     |      keys.
     |      
     |      In portable code you usually want to use CmdDown() to automatically
     |      test for the more frequently used Command key (and not the rarely
     |      used Control one) under Mac.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.
     |  
     |  GetModifiers(self)
     |      Return the bit mask of all pressed modifier keys.
     |      
     |      The return value is a combination of wxMOD_ALT, wxMOD_CONTROL,
     |      wxMOD_SHIFT and wxMOD_META bit masks. Additionally, wxMOD_NONE
     |      is defined as 0, i.e. corresponds to no modifiers
     |      (see HasModifiers()) and wxMOD_CMD is either wxMOD_CONTROL
     |      (MSW and Unix) or wxMOD_META (Mac), see CmdDown().
     |      See wxKeyModifier for the full list of modifiers.
     |      
     |      Notice that this function is easier to use correctly than, for
     |      example, ControlDown() because when using the latter you also
     |      have to remember to test that none of the other modifiers is pressed:
     |      
     |      if ( ControlDown() && !AltDown() && !ShiftDown() && !MetaDown() )
     |          ... handle Ctrl-XXX ...
     |      
     |      and forgetting to do it can result in serious program bugs (e.g.
     |      program not working with European keyboard layout where AltGr key
     |      which is seen by the program as combination of CTRL and ALT is used).
     |      On the other hand, you can simply write:
     |      
     |      if ( GetModifiers() == wxMOD_CONTROL )
     |          ... handle Ctrl-XXX ...
     |      
     |      with this function.
     |  
     |  HasModifiers(self)
     |      Returns true if any modifiers at all are pressed.
     |      
     |      This is equivalent to GetModifiers() != wxMOD_NONE.
     |  
     |  SetAltDown(self, down)
     |      Sets the Alt key down state at the time of the event.
     |  
     |  SetCmdDown(self, down)
     |      Sets the Cmd key down state at the time of the event.
     |      "Cmd" is a pseudo key which is the same as Control for PC and Unix
     |      platforms but the special "Apple" (a.k.a as "Command") key on Macs.
     |      
     |      Notice: Apple "Cmd" (Command) Not supported, by Ncurses, on computer
     |      platforms running Mac OS X, Linux or Windows.
     |  
     |  SetControlDown(self, down)
     |      Sets the Control key down state at the time of the event.
     |  
     |  SetMetaDown(self, down)
     |      Sets the Meta key down state at the time of the event.
     |      
     |      Notice: Apple "Cmd" (Command) Not supported, by Ncurses, on computer
     |      platforms running Mac OS X, Linux or Windows.
     |  
     |  SetShiftDown(self, down)
     |      Sets the Shift key down state at the time of the event.
     |  
     |  ShiftDown(self)
     |      Returns true if the Shift key is pressed.
     |      
     |      This function does not distinguish between right and left shift keys.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.

DATA
    DEBUG = True
    VERBOSE = True
    __authors__ = 'Richard S. Gordon'
    __copyright__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll r...
    __credits__ = '\n\n  Credits: \n\n\t  tsLibGUI Import & Application .....
    __date__ = '04/01/2013'
    __header__ = '\n\ntsWxMouseEvent, v1.0.1 (build 04/01/2013)\n\n  A... ...
    __license__ = 'GNU General Public License, Version 3, 29 June 2007'
    __line1__ = 'tsWxMouseEvent, v1.0.1 (build 04/01/2013)'
    __line2__ = 'Author(s): Richard S. Gordon'
    __line3__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll right...
    __line4__ = 'GNU General Public License, Version 3, 29 June 2...U Gene...
    __title__ = 'tsWxMouseEvent'
    __version__ = '1.0.1'
    mainTitleVersionDate = 'tsWxMouseEvent, v1.0.1 (build 04/01/2013)'
    unimplemented = True
    validMouseEventTypes = [107, 108, 100, 101, 109, 102, 103, 110, 104, 1...

VERSION
    1.0.1

DATE
    04/01/2013

CREDITS
    
    
      Credits: 
    
    	  tsLibGUI Import & Application Launch Features: 
    	  Copyright (c) 2007-2009 Frederick A. Kier.
    			All rights reserved.
    
    	  Python Curses Module API & Run Time Library Features:
    	  Copyright (c) 2001-2013 Python Software Foundation.
    			All rights reserved.
    	  PSF License Agreement for Python 2.7.3 & 3.3.0
    
    	  wxWidgets (formerly wxWindows) & wxPython API Features:
    	  Copyright (c) 1992-2008 Julian Smart, Robert Roebling,
    			Vadim Zeitlin and other members of the 
    			wxWidgets team.
    			All rights reserved.
    	  wxWindows Library License
    
    	  nCurses API & Run Time Library Features:
    	  Copyright (c) 1998-2011 Free Software Foundation, Inc.
    			All rights reserved.
    	  GNU General Public License, Version 3, 29 June 2007


