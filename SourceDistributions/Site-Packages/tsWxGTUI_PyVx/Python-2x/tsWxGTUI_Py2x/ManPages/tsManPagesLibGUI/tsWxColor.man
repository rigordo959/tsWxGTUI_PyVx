
Help on module tsWxColor:

NAME
    tsWxColor

FILE
    ./tsLibGUI/tsWxPkg/src/tsWxColor.py

DESCRIPTION
    tsWxColor.py - Class to establish a colour object representing
    a combination of Red, Green, and Blue (RGB) intensity values that
    is used to determine drawing colours, window colours, etc.
    Valid RGB values are in the range 0 to 255.

CLASSES
    tsWxObject.Object(__builtin__.object)
        Color
    
    class Color(tsWxObject.Object)
     |  A colour is an object representing a combination of Red, Green, and
     |  Blue (RGB) intensity values, and is used to determine drawing colours,
     |  window colours, etc.  Valid RGB values are in the range 0 to 255.
     |  
     |  In wxPython there are typemaps that will automatically convert from a
     |  colour name, from a #RRGGBB colour hex value string, or from a 3 or 4
     |  integer tuple to a wx.Colour object when calling C++ methods that
     |  expect a wxColour.  This means that the following are all
     |  equivallent:
     |  
     |  win.SetBackgroundColour(wxColour(0,0,255))
     |  win.SetBackgroundColour("BLUE")
     |  win.SetBackgroundColour("#0000FF")
     |  win.SetBackgroundColour((0,0,255))
     |  
     |  In addition to the RGB values, the alpha transparency can optionally
     |  be set.  This is supported by the typemaps as well as the wx.Colour
     |  constructors and setters.  (The alpha value is ignored in many places
     |  that take a wx.Colour object, but it is honored in things like wx.GCDC
     |  or wx.GraphicsContext.)  Adding an alpha value of 0xC0 (192) to the
     |  above samples looks like this:
     |  
     |  win.SetBackgroundColour(wxColour(0,0,255,192))
     |  win.SetBackgroundColour("BLUE:C0")
     |  win.SetBackgroundColour("#0000FFC0")
     |  win.SetBackgroundColour((0,0,255,192))
     |  
     |  Additional colour names and their coresponding values can be added
     |  using wx.ColourDatabase. Also see wx.lib.colourdb for a large set
     |  of colour names and values.  Various system colours (as set in the
     |  user system preferences or control panel) can be retrieved with
     |  wx.SystemSettings.GetColour.
     |  
     |  Method resolution order:
     |      Color
     |      tsWxObject.Object
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  Alpha(self)
     |      Returns the Alpha value.
     |  
     |  Blue(self)
     |      Returns the blue intensity.
     |  
     |  Get(self, includeAlpha=False)
     |      Returns the RGB intensity values as a tuple, optionally the alpha
     |      value as well.
     |  
     |  GetAsString(self, flags)
     |      Return the colour as a string.
     |  
     |  GetPixel(self)
     |      Returns a pixel value which is platform-dependent.
     |  
     |  GetRGB(self)
     |      Return the colour as a packed RGB value
     |  
     |  Green(self)
     |      Returns the green intensity.
     |  
     |  IsOk(self)
     |      Returns True if the colour object is valid (the colour has been
     |      initialised with RGB values).
     |  
     |  Ok(self)
     |      Returns True if the colour object is valid (the colour has been
     |      initialised with RGB values).
     |  
     |  Red(self)
     |      Returns the red intensity.
     |  
     |  Set(self, red, green, blue, alpha)
     |      Sets the RGB intensity values.
     |  
     |  SetFromName(self, colourName)
     |      Sets the RGB intensity values using a colour name listed in
     |      wx.TheColourDatabase.
     |  
     |  __del__(self)
     |  
     |  __eq__(self, other)
     |      Compare colours for equality.
     |  
     |  __getitem__(self, index)
     |      Under Construction.
     |  
     |  __init__(self, red, green, blue, alpha)
     |      Constructs a colour from red, green, blue and alpha values.
     |  
     |  __len__(self)
     |      Return length of this object.
     |  
     |  __ne__(self, other)
     |      Compare colours for inequality.
     |  
     |  __nonzero__(self)
     |      Return True if this object is not zero.
     |  
     |  __reduce__(self)
     |      Under construction.
     |  
     |  __repr__(self)
     |      Return text representation.
     |  
     |  __str__(self)
     |      Return text representation.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  SetRGB(*args, **kwargs)
     |      SetRGB(self, unsigned long colRGB)
     |  
     |  asTuple(*args, **kwargs)
     |      asTuple is deprecated, use Get instead
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  Pixel
     |      Returns a pixel value which is platform-dependent.
     |  
     |  RGB
     |      Return the colour as a packed RGB value
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxObject.Object:
     |  
     |  Destroy(self)
     |      Deletes the C++ object this Python object is a proxy for.
     |  
     |  GetClassInfo(self)
     |      Return information about the class.
     |  
     |  GetClassName(self)
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  IsSameAs(self, p)
     |      For wx.Objects that use C++ reference counting internally, this
     |      method can be used to determine if two objects are referencing
     |      the same data object.
     |  
     |  tsBeginClassRegistration(self, theClass, applicationId)
     |      Establish connection with application logger. Log the beginning of
     |      class registration.
     |      
     |      Establish application access to display top-level window and to
     |      curses screen and windows.
     |  
     |  tsEndClassRegistration(self, theClass)
     |      Log the ending of class registration.
     |  
     |  tsGetClassNameIndent(self, theClassName)
     |      Return the hierarchical level associated with the specified class
     |      for use in indenting the logging of class initialization entry and
     |      exit.
     |  
     |  tsGetTerminalPixelRectangle(self)
     |      Returns the bounding rectangle the client area of the display,
     |      i.e., without taskbars and such.
     |  
     |  tsGetTheLogger(self)
     |      Return the logger instance.
     |  
     |  tsGetTheTerminal(self, theClass)
     |      Return the terminal instance.
     |  
     |  tsGetTheTerminalScreen(self, theClass)
     |      Return the screen instance.
     |  
     |  tsGetThisOwn(self)
     |      Return MembershipFlag.
     |  
     |  tsInstallTheLoggerAccess(self, indent, theClass, applicationId)
     |      Establish connection with application logger.
     |  
     |  tsInstallTheTerminalAccess(self, indent, theClass, applicationId)
     |      Establish those display areas reserved for task bar and stdio
     |      redirection. Create links to the internal information needed
     |      to monitor and control the physical screen and virtual windows
     |      of the Graphical Text User Interface.
     |  
     |  tsRegisterClassNameAndMembershipFlag(self, theClass)
     |      Record Class Name and Membership Flag instance variables.
     |  
     |  tsUpdateEventAndAcceleratorTables(self, event, handler, source, id=-1, id2=-1, useSystemEventTable=False)
     |      Bind with event and accelerator System and User tables.
     |      
     |      event: One of the EVT_* objects that specifies the
     |             the type of event to bind.
     |      
     |      handler: A callable object to be invoked when the event is
     |               delivered to self.  Pass None to disconnect an
     |               event handler.
     |      
     |      source: Sometimes the event originates from a different window
     |              than self, but you still want to catch it in self.  (For
     |              example, a button event delivered to a frame.)  By passing
     |              the source of the event, the event handling system is able
     |              to differentiate between the same event type from different
     |              controls.
     |      
     |      id: Used to specify the event source by ID instead of instance.
     |      
     |      id2: Used when it is desirable to bind a handler to a range of ids,
     |           such as with EVT_MENU_RANGE.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tsWxObject.Object:
     |  
     |  tsGetCurrentId()
     |      Return latest ID.
     |  
     |  tsGetTheId(mySelf)
     |      Return the ID associated with this class instance.
     |  
     |  tsNewId()
     |      Create a unique ID.
     |      
     |      Remarks:
     |      Various controls and other parts of wxWidgets need an ID. Sometimes
     |      the ID may be directly provided by the user or have a predefined
     |      value, such as wxID_OPEN. Often, however, the value of the ID is
     |      unimportant and is created automatically by calling
     |      wxWindow::NewControlId or by passing wxID_ANY as the ID of an
     |      object.
     |      
     |      There are two ways to generate an ID. One way is to start at a
     |      negative number, and for each new ID, return the next smallest
     |      number. This is fine for systems that can use the full range of
     |      negative numbers for IDs, as this provides more than enough IDs
     |      and it would take a very very long time to run out and wrap
     |      around. However, some systems cannot use the full range of the
     |      ID value. Windows, for example, can only use 16 bit IDs, and
     |      only has about 32000 possible automatic IDs that can be
     |      generated by wxWindow::NewControlId. If the program runs long
     |      enough, depending on the program itself, using this first method
     |      would cause the IDs to wrap around into the positive ID range
     |      and cause possible clashes with any directly specified ID values.
     |      
     |      The other way is to keep track of the IDs returned by
     |      wxWindow::NewControlId and do not return them again until the
     |      ID is completely free and not being used by any other objects.
     |      This will make sure that the ID values do not clash with one
     |      another. This is accomplished by keeping a reference count for
     |      each of the IDs that can possibly be returned by
     |      wxWindow::NewControlId. Other IDs are not reference counted.
     |  
     |  tsRegisterId(usedId)
     |      Adjust latest ID to reflect specified new one.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxObject.Object:
     |  
     |  ClassName
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      Return MembershipFlag.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsWxObject.Object:
     |  
     |  CurrentId = 100
     |  
     |  PyApp_EventQueue = None
     |  
     |  PyApp_Object = None
     |  
     |  TheDisplay = None
     |  
     |  TheLogger = None
     |  
     |  TheTerminal = None
     |  
     |  TheTerminalScreen = None

DATA
    DEBUG = True
    VERBOSE = True
    __authors__ = 'Richard S. Gordon'
    __copyright__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll r...
    __credits__ = '\n\n  Credits: \n\n\t  tsLibGUI Import & Application .....
    __date__ = '04/01/2013'
    __header__ = '\n\ntsWxColor, v0.2.0 (build 04/01/2013)\n\n  Author... ...
    __license__ = 'GNU General Public License, Version 3, 29 June 2007'
    __line1__ = 'tsWxColor, v0.2.0 (build 04/01/2013)'
    __line2__ = 'Author(s): Richard S. Gordon'
    __line3__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll right...
    __line4__ = 'GNU General Public License, Version 3, 29 June 2...U Gene...
    __title__ = 'tsWxColor'
    __version__ = '0.2.0'
    mainTitleVersionDate = 'tsWxColor, v0.2.0 (build 04/01/2013)'

VERSION
    0.2.0

DATE
    04/01/2013

CREDITS
    
    
      Credits: 
    
    	  tsLibGUI Import & Application Launch Features: 
    	  Copyright (c) 2007-2009 Frederick A. Kier.
    			All rights reserved.
    
    	  Python Curses Module API & Run Time Library Features:
    	  Copyright (c) 2001-2013 Python Software Foundation.
    			All rights reserved.
    	  PSF License Agreement for Python 2.7.3 & 3.3.0
    
    	  wxWidgets (formerly wxWindows) & wxPython API Features:
    	  Copyright (c) 1992-2008 Julian Smart, Robert Roebling,
    			Vadim Zeitlin and other members of the 
    			wxWidgets team.
    			All rights reserved.
    	  wxWindows Library License
    
    	  nCurses API & Run Time Library Features:
    	  Copyright (c) 1998-2011 Free Software Foundation, Inc.
    			All rights reserved.
    	  GNU General Public License, Version 3, 29 June 2007


