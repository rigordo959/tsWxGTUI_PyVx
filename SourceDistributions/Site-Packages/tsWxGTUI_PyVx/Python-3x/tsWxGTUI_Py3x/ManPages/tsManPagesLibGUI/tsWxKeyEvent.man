
Help on module tsWxKeyEvent:

NAME
    tsWxKeyEvent

FILE
    ./tsLibGUI/tsWxPkg/src/tsWxKeyEvent.py

DESCRIPTION
    tsWxKeyEvent.py - Class to contain information about key press
    and release events.

CLASSES
    tsWxEvent.Event(tsWxObject.Object)
        KeyEvent(tsWxEvent.Event, tsWxKeyboardState.KeyboardState)
    tsWxKeyboardState.KeyboardState(__builtin__.object)
        KeyEvent(tsWxEvent.Event, tsWxKeyboardState.KeyboardState)
    
    class KeyEvent(tsWxEvent.Event, tsWxKeyboardState.KeyboardState)
     |  This event class contains information about key press and release
     |  events.
     |  
     |  The main information carried by this event is the key being pressed
     |  or released. It can be accessed using either GetKeyCode() function
     |  or GetUnicodeKey(). For the printable characters, the latter should
     |  be used as it works for any keys, including non-Latin-1 characters
     |  that can be entered when using national keyboard layouts. GetKeyCode()
     |  should be used to handle special characters (such as cursor arrows
     |  keys or HOME or INS and so on) which correspond to wxKeyCode enum
     |  elements above the WXK_START constant. While GetKeyCode() also
     |  returns the character code for Latin-1 keys for compatibility, it
     |  does not work for Unicode characters in general and will return
     |  WXK_NONE for any non-Latin-1 ones. For this reason, it is recommended
     |  to always use GetUnicodeKey() and only fall back to GetKeyCode() if
     |  GetUnicodeKey() returned WXK_NONE meaning that the event corresponds
     |  to a non-printable special keys.
     |  
     |  While both of these functions can be used with the events of
     |  wxEVT_KEY_DOWN, wxEVT_KEY_UP and wxEVT_CHAR types, the values
     |  returned by them are different for the first two events and the
     |  last one. For the latter, the key returned corresponds to the
     |  character that would appear in e.g. a text zone if the user
     |  pressed the key in it. As such, its value depends on the current
     |  state of the Shift key and, for the letters, on the state of
     |  Caps Lock modifier. For example, if A key is pressed without
     |  Shift being held down, wxKeyEvent of type wxEVT_CHAR generated
     |  for this key press will return (from either GetKeyCode() or
     |  GetUnicodeKey() as their meanings coincide for ASCII characters)
     |  key code of 97 corresponding the ASCII value of a. And if the
     |  same key is pressed but with Shift being held (or Caps Lock
     |  being active), then the key could would be 65, i.e. ASCII value
     |  of capital A.
     |  
     |  However for the key down and up events the returned key code will
     |  instead be A independently of the state of the modifier keys i.e.
     |  it depends only on physical key being pressed and is not translated
     |  to its logical representation using the current keyboard state.
     |  Such untranslated key codes are defined as follows:
     |  
     |  * For the letters they correspond to the upper case value of the letter.
     |  
     |  * For the other alphanumeric keys (e.g. 7 or +), the untranslated
     |  key code corresponds to the character produced by the key when it
     |  is pressed without Shift. E.g. in standard US keyboard layout the
     |  untranslated key code for the key =/+ in the upper right corner
     |  of the keyboard is 61 which is the ASCII value of =.
     |  
     |  * For the rest of the keys (i.e. special non-printable keys) it
     |  is the same as the normal key code as no translation is used anyhow.
     |  
     |  Notice that the first rule applies to all Unicode letters, not just
     |  the usual Latin-1 ones. However for non-Latin-1 letters only
     |  GetUnicodeKey() can be used to retrieve the key code as GetKeyCode()
     |  just returns WXK_NONE in this case.
     |  
     |  To summarize: you should handle wxEVT_CHAR if you need the translated
     |  key and wxEVT_KEY_DOWN if you only need the value of the key itself,
     |  independent of the current keyboard state.
     |  
     |  Note:
     |  
     |  Not all key down events may be generated by the user. As an example,
     |  wxEVT_KEY_DOWN with = key code can be generated using the standard
     |  US keyboard layout but not using the German one because the = key
     |  corresponds to Shift-0 key combination in this layout and the key
     |  code for it is 0, not =. Because of this you should avoid requiring
     |  your users to type key events that might be impossible to enter on
     |  their keyboard.
     |  
     |  Another difference between key and char events is that another kind
     |  of translation is done for the latter ones when the Control key is
     |  pressed: char events for ASCII letters in this case carry codes
     |  corresponding to the ASCII value of Ctrl-Latter, i.e. 1 for Ctrl-A,
     |  2 for Ctrl-B and so on until 26 for Ctrl-Z. This is convenient for
     |  terminal-like applications and can be completely ignored by all the
     |  other ones (if you need to handle Ctrl-A it is probably a better
     |  idea to use the key event rather than the char one). Notice that
     |  currently no translation is done for the presses of [, \, ], ^
     |  and _ keys which might be mapped to ASCII values from 27 to 31.
     |  
     |  Finally, modifier keys only generate key events but no char events
     |  at all. The modifiers keys are WXK_SHIFT, WXK_CONTROL, WXK_ALT and
     |  various WXK_WINDOWS_XXX from wxKeyCode enum.
     |  
     |  Modifier keys events are special in one additional aspect: usually
     |  the keyboard state associated with a key press is well defined,
     |  e.g. wxKeyboardState::ShiftDown() returns true only if the Shift
     |  key was held pressed when the key that generated this event itself
     |  was pressed. There is an ambiguity for the key press events for
     |  Shift key itself however. By convention, it is considered to be
     |  already pressed when it is pressed and already released when it
     |  is released. In other words, wxEVT_KEY_DOWN event for the Shift
     |  key itself will have wxMOD_SHIFT in GetModifiers() and ShiftDown()
     |  will return true while the wxEVT_KEY_UP event for Shift itself
     |  will not have wxMOD_SHIFT in its modifiers and ShiftDown() will
     |  return false.
     |  
     |  Tip: You may discover the key codes and modifiers generated by
     |  all the keys on your system interactively by running the Key
     |  Event Sample wxWidgets sample and pressing some keys in it.
     |  
     |  Note:
     |  
     |  If a key down (EVT_KEY_DOWN) event is caught and the event handler
     |  does not call event.Skip() then the corresponding char event
     |  (EVT_CHAR) will not happen. This is by design and enables the
     |  programs that handle both types of events to avoid processing
     |  the same key twice. As a consequence, if you do not want to
     |  suppress the wxEVT_CHAR events for the keys you handle, always
     |  call event.Skip() in your wxEVT_KEY_DOWN handler. Not doing may
     |  also prevent accelerators defined using this key from working.
     |  
     |  If a key is maintained in a pressed state, you will typically
     |  get a lot of (automatically generated) key down events but only
     |  one key up one at the end when the key is released so it is
     |  wrong to assume that there is one up event corresponding to
     |  each down one.
     |  
     |  For Windows programmers: The key and char events in wxWidgets
     |  are similar to but slightly different from Windows WM_KEYDOWN
     |  and WM_CHAR events. In particular, Alt-x combination will
     |  generate a char event in wxWidgets (unless it is used as an
     |  accelerator) and almost all keys, including ones without
     |  ASCII equivalents, generate char events too.
     |  
     |  Method resolution order:
     |      KeyEvent
     |      tsWxEvent.Event
     |      tsWxObject.Object
     |      tsWxKeyboardState.KeyboardState
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  GetKeyCode(self)
     |      Returns the key code of the key that generated this event.
     |      
     |      ASCII symbols return normal ASCII values, while events from
     |      special keys such as "left cursor arrow" (WXK_LEFT) return
     |      values outside of the ASCII range. See wxKeyCode for a full
     |      list of the virtual key codes.
     |      
     |      Note that this method returns a meaningful value only for
     |      special non-alphanumeric keys or if the user entered a
     |      character that can be represented in current locale default
     |      charset. Otherwise, e.g. if the user enters a Japanese
     |      character in a program not using Japanese locale, this
     |      method returns WXK_NONE and GetUnicodeKey() should be used
     |      to obtain the corresponding Unicode character.
     |      
     |      Using GetUnicodeKey() is in general the right thing to do
     |      if you are interested in the characters typed by the user,
     |      GetKeyCode() should be only used for special keys (for
     |      which GetUnicodeKey() returns WXK_NONE).
     |  
     |  GetPosition(self)
     |      Obtains the position (in client coordinates) at which the key
     |      was pressed.
     |  
     |  GetPositionTuple(self)
     |      Obtains the position (in client coordinates) at which the key
     |      was pressed.
     |  
     |  GetRawKeyCode(self)
     |      Returns the raw key code for this event.
     |      
     |      The flags are platform-dependent and should only be used
     |      if the functionality provided by other wxKeyEvent methods
     |      is insufficient.
     |      
     |      Under MSW, the raw key code is the value of wParam parameter
     |      of the corresponding message.
     |      
     |      Under GTK, the raw key code is the keyval field of the
     |      corresponding GDK event.
     |      
     |      Under OS X, the raw key code is the keyCode field of the
     |      corresponding NSEvent.
     |      
     |      Note:
     |      
     |      Currently the raw key codes are not supported by all ports,
     |      use #ifdef wxHAS_RAW_KEY_CODES to determine if this feature
     |      is available.
     |  
     |  GetRawKeyFlags(self)
     |      Returns the low level key flags for this event.
     |      
     |      The flags are platform-dependent and should only be used
     |      if the functionality provided by other wxKeyEvent methods
     |      is insufficient.
     |      
     |      Under MSW, the raw flags are just the value of lParam
     |      parameter of the corresponding message.
     |      
     |      Under GTK, the raw flags contain the hardware_keycode
     |      field of the corresponding GDK event.
     |      
     |      Under OS X, the raw flags contain the modifiers state.
     |      
     |      Note:
     |      
     |      Currently the raw key flags are not supported by all
     |      ports, use #ifdef wxHAS_RAW_KEY_CODES to determine
     |      if this feature is available.
     |  
     |  GetUnicodeKey(self)
     |      Returns the Unicode character corresponding to this key event.
     |      
     |      If the key pressed does not have any character value
     |      (e.g. a cursor key) this method will return WXK_NONE.
     |      In this case you should use GetKeyCode() to retrieve
     |      the value of the key.
     |      
     |      This function is only available in Unicode build,
     |      i.e. when wxUSE_UNICODE is 1.
     |  
     |  GetX(self)
     |      Returns the X position (in client coordinates) of the event.
     |  
     |  GetY(self)
     |      Returns the Y position (in client coordinates) of the event.
     |  
     |  IsKeyInCategory(self, category)
     |      Returns true if the key is in the given key category.
     |      
     |      Parameters:
     |      
     |      category - A bitwise combination of named wxKeyCategoryFlags
     |      constants.
     |      
     |      Since:
     |      2.9.1
     |  
     |  SetUnicodeKey(self, uniChar)
     |      Set the Unicode value of the key event, but only if this is a
     |      Unicode build of wxPython.
     |  
     |  SetX(self, x)
     |      Sets the X coordinate of the physical mouse event position.
     |  
     |  SetY(self, y)
     |      Sets the Y coordinate of the physical mouse event position.
     |  
     |  __init__(self, keyEventType=0)
     |      Constructs a wx.KeyEvent.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxEvent.Event:
     |  
     |  CanVeto(self)
     |  
     |  Clone(self)
     |      Returns a copy of the event.
     |      
     |      Any event that is posted to the wxWidgets event system for later
     |      action (via wxEvtHandler::AddPendingEvent, wxEvtHandler::QueueEvent
     |      or wxPostEvent()) must implement this method.
     |      
     |      All wxWidgets events fully implement this method, but any derived
     |      events implemented by the user should also implement this method
     |      just in case they (or some event derived from them) are ever posted.
     |      
     |      All wxWidgets events implement a copy constructor, so the easiest
     |      way of implementing the Clone function is to implement a copy
     |      constructor for a new event (call it MyEvent) and then define the
     |      Clone function like this:
     |      
     |      wxEvent *Clone() const { return new MyEvent(*this); }
     |  
     |  GetEventCategory(self)
     |      Returns a generic category for this event.
     |      
     |      wxEvent implementation returns wxEVT_CATEGORY_UI by default.
     |      
     |      This function is used to selectively process events in
     |      wxEventLoopBase::YieldFor.
     |  
     |  GetEventCriteria(self)
     |      Returns the criteria for generating this event.
     |      
     |      wxEvent implementation returns None by default.
     |  
     |  GetEventData(self)
     |      Returns instance specific data for this event.
     |  
     |  GetEventSource(self)
     |      Returns the identifier of the given event source.
     |  
     |  GetEventType(self)
     |      Returns the identifier of the given event type, such as
     |      wxEVT_COMMAND_BUTTON_CLICKED.
     |  
     |  GetId(self)
     |      Returns the identifier associated with this event, such as a button
     |      command id.
     |  
     |  GetSkipped(self)
     |      Returns true if the event handler should be skipped, false otherwise.
     |  
     |  GetTimestamp(self)
     |      Gets the timestamp for the event.
     |      
     |      The timestamp is the time in milliseconds since some fixed moment
     |      (not necessarily the standard Unix Epoch, so only differences
     |      between the timestamps and not their absolute values usually make
     |      sense).
     |      
     |      Warning:
     |      
     |      wxWidgets returns a non-NULL timestamp only for mouse and key
     |      events (see wxMouseEvent and wxKeyEvent).
     |  
     |  GetVeto(self)
     |  
     |  IsCommandEvent(self)
     |      Returns true if the event is or is derived from wxCommandEvent
     |      else it returns false.
     |      
     |      Note: Exists only for optimization purposes.
     |  
     |  ResumePropagation(self, propagationLevel)
     |      Sets the propagation level to the given value (for example returned
     |      from an earlier call to wxEvent::StopPropagation).
     |  
     |  SetCanVeto(self, canVeto=True)
     |  
     |  SetEventCategory(self, category=1)
     |      Sets the category forthis event.
     |      
     |      wxEvent implementation sets wxEVT_CATEGORY_UI by default.
     |  
     |  SetEventCriteria(self, criteria=None)
     |      Sets the criteria for generating this event.
     |      
     |      wxEvent implementation sets None by default.
     |  
     |  SetEventData(self, data)
     |      Sets the event data.
     |  
     |  SetEventSource(self, src)
     |      Sets the event source.
     |  
     |  SetEventType(self, typ)
     |      Sets the event type.
     |  
     |  SetId(self, id)
     |      Sets the identifier associated with this event, such as a button
     |      command id.
     |  
     |  SetSkipped(self, skip)
     |  
     |  SetTimestamp(self, ts)
     |      Sets the timestamp for the event.
     |  
     |  SetWasProcessed(self, processed)
     |  
     |  ShouldProcessOnlyIn(self)
     |  
     |  ShouldPropagate(self)
     |      Test if this event should be propagated or not, i.e.
     |      if the propagation level is currently greater than 0.
     |  
     |  Skip(self, skip=True)
     |      This method can be used inside an event handler to control whether
     |      further event handlers bound to this event will be called after the
     |      current one returns.
     |      
     |      Without Skip() (or equivalently if Skip(false) is used), the event
     |      will not be processed any more. If Skip(true) is called, the event
     |      processing system continues searching for a further handler function
     |      for this event, even though it has been processed already in the
     |      current handler.
     |      
     |      In general, it is recommended to skip all non-command events to allow
     |      the default handling to take place. The command events are, however,
     |      normally not skipped as usually a single command such as a button
     |      click or menu item selection must only be processed by one handler.
     |  
     |  StopPropagation(self)
     |      Stop the event from propagating to its parent window.
     |      
     |      Returns the old propagation level value which may be later passed
     |      to ResumePropagation() to allow propagating the event again.
     |  
     |  Veto(self, veto=True)
     |  
     |  WasProcessed(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tsWxEvent.Event:
     |  
     |  tsGetCurrentEvtId()
     |      Return latest ID.
     |  
     |  tsNewEvtId()
     |      Create a unique ID.
     |  
     |  tsRegisterId(usedId)
     |      Adjust latest ID to reflect specified new one.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxEvent.Event:
     |  
     |  EventCriteria
     |      Returns the criteria for generating this event.
     |      
     |      wxEvent implementation returns None by default.
     |  
     |  EventData
     |      Returns instance specific data for this event.
     |  
     |  EventSource
     |      Returns the identifier of the given event source.
     |  
     |  EventTimestamp
     |      Gets the timestamp for the event.
     |      
     |      The timestamp is the time in milliseconds since some fixed moment
     |      (not necessarily the standard Unix Epoch, so only differences
     |      between the timestamps and not their absolute values usually make
     |      sense).
     |      
     |      Warning:
     |      
     |      wxWidgets returns a non-NULL timestamp only for mouse and key
     |      events (see wxMouseEvent and wxKeyEvent).
     |  
     |  EventType
     |      Returns the identifier of the given event type, such as
     |      wxEVT_COMMAND_BUTTON_CLICKED.
     |  
     |  Id
     |      Returns the identifier associated with this event, such as a button
     |      command id.
     |  
     |  Skipped
     |      Returns true if the event handler should be skipped, false otherwise.
     |  
     |  Timestamp
     |      Gets the timestamp for the event.
     |      
     |      The timestamp is the time in milliseconds since some fixed moment
     |      (not necessarily the standard Unix Epoch, so only differences
     |      between the timestamps and not their absolute values usually make
     |      sense).
     |      
     |      Warning:
     |      
     |      wxWidgets returns a non-NULL timestamp only for mouse and key
     |      events (see wxMouseEvent and wxKeyEvent).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsWxEvent.Event:
     |  
     |  CurrentEvtId = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxObject.Object:
     |  
     |  Destroy(self)
     |      Deletes the C++ object this Python object is a proxy for.
     |  
     |  GetClassInfo(self)
     |      Return information about the class.
     |  
     |  GetClassName(self)
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  IsSameAs(self, p)
     |      For wx.Objects that use C++ reference counting internally, this
     |      method can be used to determine if two objects are referencing
     |      the same data object.
     |  
     |  tsBeginClassRegistration(self, theClass, applicationId)
     |      Establish connection with application logger. Log the beginning of
     |      class registration.
     |      
     |      Establish application access to display top-level window and to
     |      curses screen and windows.
     |  
     |  tsEndClassRegistration(self, theClass)
     |      Log the ending of class registration.
     |  
     |  tsGetClassNameIndent(self, theClassName)
     |      Return the hierarchical level associated with the specified class
     |      for use in indenting the logging of class initialization entry and
     |      exit.
     |  
     |  tsGetTerminalPixelRectangle(self)
     |      Returns the bounding rectangle the client area of the display,
     |      i.e., without taskbars and such.
     |  
     |  tsGetTheLogger(self)
     |      Return the logger instance.
     |  
     |  tsGetTheTerminal(self, theClass)
     |      Return the terminal instance.
     |  
     |  tsGetTheTerminalScreen(self, theClass)
     |      Return the screen instance.
     |  
     |  tsGetThisOwn(self)
     |      Return MembershipFlag.
     |  
     |  tsInstallTheLoggerAccess(self, indent, theClass, applicationId)
     |      Establish connection with application logger.
     |  
     |  tsInstallTheTerminalAccess(self, indent, theClass, applicationId)
     |      Establish those display areas reserved for task bar and stdio
     |      redirection. Create links to the internal information needed
     |      to monitor and control the physical screen and virtual windows
     |      of the Graphical Text User Interface.
     |  
     |  tsRegisterClassNameAndMembershipFlag(self, theClass)
     |      Record Class Name and Membership Flag instance variables.
     |  
     |  tsUpdateEventAndAcceleratorTables(self, event, handler, source, id=-1, id2=-1, useSystemEventTable=False)
     |      Bind with event and accelerator System and User tables.
     |      
     |      event: One of the EVT_* objects that specifies the
     |             the type of event to bind.
     |      
     |      handler: A callable object to be invoked when the event is
     |               delivered to self.  Pass None to disconnect an
     |               event handler.
     |      
     |      source: Sometimes the event originates from a different window
     |              than self, but you still want to catch it in self.  (For
     |              example, a button event delivered to a frame.)  By passing
     |              the source of the event, the event handling system is able
     |              to differentiate between the same event type from different
     |              controls.
     |      
     |      id: Used to specify the event source by ID instead of instance.
     |      
     |      id2: Used when it is desirable to bind a handler to a range of ids,
     |           such as with EVT_MENU_RANGE.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tsWxObject.Object:
     |  
     |  tsGetCurrentId()
     |      Return latest ID.
     |  
     |  tsGetTheId(mySelf)
     |      Return the ID associated with this class instance.
     |  
     |  tsNewId()
     |      Create a unique ID.
     |      
     |      Remarks:
     |      Various controls and other parts of wxWidgets need an ID. Sometimes
     |      the ID may be directly provided by the user or have a predefined
     |      value, such as wxID_OPEN. Often, however, the value of the ID is
     |      unimportant and is created automatically by calling
     |      wxWindow::NewControlId or by passing wxID_ANY as the ID of an
     |      object.
     |      
     |      There are two ways to generate an ID. One way is to start at a
     |      negative number, and for each new ID, return the next smallest
     |      number. This is fine for systems that can use the full range of
     |      negative numbers for IDs, as this provides more than enough IDs
     |      and it would take a very very long time to run out and wrap
     |      around. However, some systems cannot use the full range of the
     |      ID value. Windows, for example, can only use 16 bit IDs, and
     |      only has about 32000 possible automatic IDs that can be
     |      generated by wxWindow::NewControlId. If the program runs long
     |      enough, depending on the program itself, using this first method
     |      would cause the IDs to wrap around into the positive ID range
     |      and cause possible clashes with any directly specified ID values.
     |      
     |      The other way is to keep track of the IDs returned by
     |      wxWindow::NewControlId and do not return them again until the
     |      ID is completely free and not being used by any other objects.
     |      This will make sure that the ID values do not clash with one
     |      another. This is accomplished by keeping a reference count for
     |      each of the IDs that can possibly be returned by
     |      wxWindow::NewControlId. Other IDs are not reference counted.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tsWxObject.Object:
     |  
     |  ClassName
     |      Returns the class name of the C++ class using wxRTTI.
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      Return MembershipFlag.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tsWxObject.Object:
     |  
     |  CurrentId = 100
     |  
     |  PyApp_EventQueue = None
     |  
     |  PyApp_Object = None
     |  
     |  TheDisplay = None
     |  
     |  TheLogger = None
     |  
     |  TheTerminal = None
     |  
     |  TheTerminalScreen = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tsWxKeyboardState.KeyboardState:
     |  
     |  AltDown(self)
     |      Returns true if the Alt key is pressed.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.
     |  
     |  CmdDown(self)
     |      Returns true if the key used for command accelerators is pressed.
     |      
     |      Cmd is a pseudo key which is Control for PC and Unix platforms but
     |      Apple (or Command) key under Macs: it makes often sense to use it
     |      instead of ControlDown() because Command key is used for the same
     |      thing under Mac as Control elsewhere (even though Control still
     |      exists, it is usually not used for the same purpose under Mac).
     |      
     |      Notice that GetModifiers() should usually be used instead of this
     |      one. However, the Apple "Cmd" (Command) is Not supported, by
     |      Ncurses, on computer platforms running Mac OS X, Linux or Windows.
     |  
     |  ControlDown(self)
     |      Returns true if the Control key is pressed.
     |      
     |      This function does not distinguish between right and left control
     |      keys.
     |      
     |      In portable code you usually want to use CmdDown() to automatically
     |      test for the more frequently used Command key (and not the rarely
     |      used Control one) under Mac.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.
     |  
     |  GetModifiers(self)
     |      Return the bit mask of all pressed modifier keys.
     |      
     |      The return value is a combination of wxMOD_ALT, wxMOD_CONTROL,
     |      wxMOD_SHIFT and wxMOD_META bit masks. Additionally, wxMOD_NONE
     |      is defined as 0, i.e. corresponds to no modifiers
     |      (see HasModifiers()) and wxMOD_CMD is either wxMOD_CONTROL
     |      (MSW and Unix) or wxMOD_META (Mac), see CmdDown().
     |      See wxKeyModifier for the full list of modifiers.
     |      
     |      Notice that this function is easier to use correctly than, for
     |      example, ControlDown() because when using the latter you also
     |      have to remember to test that none of the other modifiers is pressed:
     |      
     |      if ( ControlDown() && !AltDown() && !ShiftDown() && !MetaDown() )
     |          ... handle Ctrl-XXX ...
     |      
     |      and forgetting to do it can result in serious program bugs (e.g.
     |      program not working with European keyboard layout where AltGr key
     |      which is seen by the program as combination of CTRL and ALT is used).
     |      On the other hand, you can simply write:
     |      
     |      if ( GetModifiers() == wxMOD_CONTROL )
     |          ... handle Ctrl-XXX ...
     |      
     |      with this function.
     |  
     |  HasModifiers(self)
     |      Returns true if any modifiers at all are pressed.
     |      
     |      This is equivalent to GetModifiers() != wxMOD_NONE.
     |  
     |  MetaDown(self)
     |      Returns true if the Meta/Windows/Apple key is pressed.
     |      
     |      This function tests the state of the key traditionally called Meta
     |      under Unix systems, Windows keys under MSW and Apple, or Command,
     |      key under Mac.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.
     |      
     |      See also:
     |      
     |      CmdDown()
     |      
     |      Reimplemented in wxMouseEvent.
     |      
     |      Notice: Apple "Cmd" (Command) Not supported, by Ncurses, on computer
     |      platforms running Mac OS X, Linux or Windows.
     |  
     |  SetAltDown(self, down)
     |      Sets the Alt key down state at the time of the event.
     |  
     |  SetCmdDown(self, down)
     |      Sets the Cmd key down state at the time of the event.
     |      "Cmd" is a pseudo key which is the same as Control for PC and Unix
     |      platforms but the special "Apple" (a.k.a as "Command") key on Macs.
     |      
     |      Notice: Apple "Cmd" (Command) Not supported, by Ncurses, on computer
     |      platforms running Mac OS X, Linux or Windows.
     |  
     |  SetControlDown(self, down)
     |      Sets the Control key down state at the time of the event.
     |  
     |  SetMetaDown(self, down)
     |      Sets the Meta key down state at the time of the event.
     |      
     |      Notice: Apple "Cmd" (Command) Not supported, by Ncurses, on computer
     |      platforms running Mac OS X, Linux or Windows.
     |  
     |  SetShiftDown(self, down)
     |      Sets the Shift key down state at the time of the event.
     |  
     |  ShiftDown(self)
     |      Returns true if the Shift key is pressed.
     |      
     |      This function does not distinguish between right and left shift keys.
     |      
     |      Notice that GetModifiers() should usually be used instead of this one.
     |  
     |  __del__(self)

DATA
    DEBUG = True
    VERBOSE = True
    __authors__ = 'Richard S. Gordon'
    __copyright__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll r...
    __credits__ = '\n\n  Credits: \n\n\t  tsLibGUI Import & Application .....
    __date__ = '04/01/2013'
    __header__ = '\n\ntsWxKeyEvent, v1.0.0 (build 04/01/2013)\n\n  Aut... ...
    __license__ = 'GNU General Public License, Version 3, 29 June 2007'
    __line1__ = 'tsWxKeyEvent, v1.0.0 (build 04/01/2013)'
    __line2__ = 'Author(s): Richard S. Gordon'
    __line3__ = 'Copyright (c) 2007-2013 Richard S. Gordon.\n\t\tAll right...
    __line4__ = 'GNU General Public License, Version 3, 29 June 2...U Gene...
    __title__ = 'tsWxKeyEvent'
    __version__ = '1.0.0'
    mainTitleVersionDate = 'tsWxKeyEvent, v1.0.0 (build 04/01/2013)'
    unimplemented = True

VERSION
    1.0.0

DATE
    04/01/2013

CREDITS
    
    
      Credits: 
    
    	  tsLibGUI Import & Application Launch Features: 
    	  Copyright (c) 2007-2009 Frederick A. Kier.
    			All rights reserved.
    
    	  Python Curses Module API & Run Time Library Features:
    	  Copyright (c) 2001-2013 Python Software Foundation.
    			All rights reserved.
    	  PSF License Agreement for Python 2.7.3 & 3.3.0
    
    	  wxWidgets (formerly wxWindows) & wxPython API Features:
    	  Copyright (c) 1992-2008 Julian Smart, Robert Roebling,
    			Vadim Zeitlin and other members of the 
    			wxWidgets team.
    			All rights reserved.
    	  wxWindows Library License
    
    	  nCurses API & Run Time Library Features:
    	  Copyright (c) 1998-2011 Free Software Foundation, Inc.
    			All rights reserved.
    	  GNU General Public License, Version 3, 29 June 2007


